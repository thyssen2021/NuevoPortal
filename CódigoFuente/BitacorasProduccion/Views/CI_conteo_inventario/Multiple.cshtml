@model Portal_2_0.Models.CI_conteo_inventario
@using Portal_2_0.Models;

@{

    ViewBag.Title = "Inventario - Editar Registro";
    ViewBag.PrimerNivel = "ci_conteo_inventario";
    ViewBag.SegundoNivel = "ci_conteo";
    ViewBag.ControllerName = ViewContext.RouteData.Values["controller"];
    ViewBag.nav_style = "nav-sm";

    int contador = 100;
    List<CI_conteo_inventario> listadoEtiquetas = (List<CI_conteo_inventario>)ViewBag.ListadoEtiquetas;
}

@section estilos
{
    <!-- Select2 -->
    <link href="@Url.Content("~/Content/vendors/select2/css/select2.css")" rel="stylesheet">
    <link href="@Url.Content("~/Content/vendors/select2-bootstrap4-theme/select2-bootstrap4.min.css")" rel="stylesheet">
    <!-- iCheck -->
    <link href="@Url.Content("~/Content/vendors/iCheck/skins/square/blue.css")" rel="stylesheet">
    <!-- SweetAlert2 -->
    <link href="@Url.Content("~/Content/vendors/sweetalert2-theme-bootstrap-4/bootstrap-4.min.css")" rel="stylesheet">
    <style>
        /* Oculta el menu del sistema */
        footer {
            display: none !important;
        }

        .nav_menu {
            display: none !important;
        }

        .left_col {
            display: none !important;
        }

        .nav-md .container.body .right_col {
            margin-left: 0px !important;
        }
    </style>

}

<div class="right_col" role="main">
    <div class="">

        <div class="clearfix"></div>

        <div class="row">
            <div class="col-md-12 col-sm-12  ">
                <div class="x_panel">
                    <div class="x_title">
                        <h2><i class="fa fa-boxes-stacked"></i> @ViewBag.Title</h2>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">

                        @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal form-label-left" }))
                        {
                            @Html.AntiForgeryToken()

                            if (!Html.ViewData.ModelState.IsValid)
                            {
                                <div class="alert alert-danger" role="alert">
                                    @Html.ValidationSummary("", new { @class = "text-white" })
                                </div>
                            }
                            @Html.HiddenFor(model => model.id)
                            @Html.HiddenFor(model => model.material)

                            <div class="form-group row">
                                <span style="color:black"><b>Etiquetas: </b></span>
                            </div>

                            <div id="div_fallas">


                                @foreach (var etiqueta in Model.etiquetas)
                                {


                                    <div class="form-group row" id="div_fallas_@contador">

                                        @* Necesario para auto binding *@
                                        <input type="hidden" name="etiquetas.Index" id="etiquetas.Index" value="@contador" />
                                        <label class="control-label col-md-1" for="etiquetas[@contador].id">
                                            <span class="float-right">Etiqueta</span>
                                        </label>
                                        <div class="col-md-10">
                                            <select name="etiquetas[@contador].id" id="etiquetas[@contador].id" class="categoria form-control select2bs4" style="width:100%" required>
                                                <option value=''>-- Seleccione un valor --</option>
                                                @foreach (var item in listadoEtiquetas)
                                                {
                                                    <option value='@item.id' @(etiqueta.id == item.id ? "selected" : null )>@item.ConcatEtiqueta</option>
                                                }
                                            </select>
                                            <span class="field-validation-valid text-danger" data-valmsg-for="etiquetas[@contador].id" data-valmsg-replace="true"></span>
                                        </div>

                                        <div class="col-md-1">
                                            <input type="button" value="Borrar" class="btn btn-danger" onclick="borrarPieza(@contador); return false;">
                                        </div>
                                    </div>

                                    contador++;
                                }
                            </div>
                            <div class="form-group row">
                                <div class="col-md-11">
                                    <input type="button" value="Agregar" class="btn btn-round btn-warning float-right" onclick="AgregarConcepto(); return false;">
                                </div>
                            </div>
                            <div class="ln_solid"></div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.pieces, new { @class = "col-form-label col-md-1 col-sm-1" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.pieces, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                                @Html.LabelFor(model => model.unrestricted, new { @class = "col-form-label col-md-1 col-sm-1 " })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.unrestricted, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>

                                @Html.LabelFor(model => model.blocked, new { @class = "col-form-label col-md-1 col-sm-1" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.blocked, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                                @Html.LabelFor(model => model.in_quality, new { @class = "col-form-label col-md-1 col-sm-1" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.in_quality, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.gauge, new { @class = "col-form-label col-md-1 col-sm-1" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.gauge, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                                @Html.LabelFor(model => model.gauge_min, new { @class = "col-form-label col-md-1 col-sm-1" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.gauge_min, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                                @Html.LabelFor(model => model.gauge_max, new { @class = "col-form-label col-md-1 col-sm-1" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.gauge_max, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                            </div>
                            <div class="ln_solid"></div>
                            <div class="form-group row">

                            </div>
                            <div class="form-group row">

                                @Html.LabelFor(model => model.altura, new { @class = "col-form-label col-md-1 col-sm-1 label-align" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.altura, new { htmlAttributes = new { @class = "form-control cantidad", @required ="required" } })
                                    @Html.ValidationMessageFor(model => model.altura, "", new { @class = "text-danger" })
                                </div>

                                @Html.LabelFor(model => model.espesor, new { @class = "col-form-label col-md-1 col-sm-1 label-align" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.espesor, new { htmlAttributes = new { @class = "form-control cantidad" } })
                                    @Html.ValidationMessageFor(model => model.espesor, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="ln_solid"></div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.total_piezas_min, new { @class = "col-form-label col-md-1 col-sm-1 label-align" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.total_piezas_min, new { htmlAttributes = new { @class = "form-control cantidad", @readonly = "readonly" } })
                                </div>
                                @Html.LabelFor(model => model.total_piezas_max, new { @class = "col-form-label col-md-1 col-sm-1 label-align" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.total_piezas_max, new { htmlAttributes = new { @class = "form-control cantidad", @readonly = "readonly" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.cantidad_teorica, new { @class = "col-form-label col-md-1 col-sm-1 label-align" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.cantidad_teorica, new { htmlAttributes = new { @class = "form-control cantidad", @readonly = "readonly" } })
                                </div>
                                @Html.LabelFor(model => model.diferencia_sap, new { @class = "col-form-label col-md-1 col-sm-1 label-align" })
                                <div class="col-md-2 col-sm-2">
                                    @Html.EditorFor(model => model.diferencia_sap, new { htmlAttributes = new { @class = "form-control cantidad_negativa", @readonly = "readonly" } })
                                </div>
                                @Html.LabelFor(model => model.validacion, new { @class = "col-form-label col-md-1 col-sm-1 label-align" })
                                <div class="col-md-5 col-sm-5">
                                    @Html.EditorFor(model => model.validacion, new { htmlAttributes = new { @class = "form-control ", @readonly = "readonly" } })
                                </div>

                            </div>

                            <div class="form-group row">

                            </div>
                            <div class="ln_solid"></div>
                            <div class="item form-group">
                                <div class="col-md-12 col-sm-12">
                                    <button type="submit" id="btn-ok" class="btn btn-success btn-lg float-right"><i class="fa-regular fa-floppy-disk"></i> Guardar</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<div id="selects" style="display:none">
    <option value=''>-- Seleccione un valor --</option>
    @foreach (var item in listadoEtiquetas)
    {
        <option value='@item.id'>@item.ConcatEtiqueta</option>
    }

</div>


@section Scripts {
    @Scripts.Render(Url.Content("~/Content/vendors/select2/js/select2.full.min.js"))
    @Scripts.Render("~/bundles/jqueryval")
    <!-- iCheck -->
    @Scripts.Render(Url.Content("~/Content/vendors/iCheck/icheck.min.js"))
    <!-- SweetAlert2 -->
    @Scripts.Render(Url.Content("~/Content/vendors/sweetalert2/sweetalert2.min.js"))
    @*<script src="~/Scripts/Forms/ModalConfirm.js"></script>*@
    <!-- input mask -->
    @Scripts.Render(Url.Content("~/Content/vendors/jquery.inputmask/dist/jquery.inputmask.bundle.js"))



    <script>
        //$("html,body").scrollTop(2000);
        $(document).ready(function () {
            // Initialize Select2 Elements (debe ir después de asignar el valor)
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            $('.cantidad').inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'autoGroup': true, 'digits': 3, 'digitsOptional': true, 'allowMinus': false, 'placeholder': '0', 'autoUnmask': true, 'removeMaskOnSubmit': true });
            $('.cantidad_negativa').inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'autoGroup': true, 'digits': 3, 'digitsOptional': true, 'allowMinus': true, 'placeholder': '0', 'autoUnmask': true, 'removeMaskOnSubmit': true });

            //aumenta en uso cada vez que se hace un cambio en el archivo de soporte
            $("#altura").on("on change keyup clear", function () {
                calculaCantidaesTeoricas();

            });

            calculaValores();
        });

        function calculaCantidaesTeoricas() {
            let altura = ConvierteAFloat($("#altura").val(), 0);
            let gauge = ConvierteAFloat($("#gauge").val(), 0);
            let pieces = ConvierteAFloat($("#pieces").val(), 0);
            let cantidad_teorica = altura / gauge;
            let diferencia = cantidad_teorica - pieces;
            let c_min = ConvierteAFloat($("#total_piezas_min").val(), 0);
            let c_max = ConvierteAFloat($("#total_piezas_max").val(), 0);

            let validacion = "Ajustar";

            if (cantidad_teorica >= c_min && cantidad_teorica <= c_max)
                validacion = "Dentro de Tolerancias";


            $("#cantidad_teorica").val(cantidad_teorica);
            $("#diferencia_sap").val(diferencia);
            $("#validacion").val(validacion);
        }

        function calculaValores() {
            calculaPiezas();
            
        }

        //funcion para agregar los eventos de cantidades a los input
        function asignaEventosInput() {
            //Agrega el evento a todos los input
            $(".select2bs4").each(function () {
                $(this).on('input', function (e) {
                    calculaPiezas()
                    calculaCantidaesTeoricas();
                });
            });

        }

        function calculaPiezas() {
            let sumaPiezas = 0;
            let sumaUnrestricted = 0;
            let sumaBlocked = 0;
            let sumaQuality = 0;
            let sumaMin = 0;
            let sumaMax = 0;

            console.log('entra')

            $('.select2bs4').each(function () {


                $.ajax({
                    type: 'POST',
                    url: '/Combos/obtieneEtiquetaDetalles',
                    data: { id: $(this).val() },
                    success: function (data) {
                        try {
                            sumaPiezas += data[0].pieces;
                            sumaUnrestricted += data[0].unrestricted;
                            sumaBlocked += data[0].blocked;
                            sumaQuality += data[0].in_quality;
                            sumaMin += data[0].total_piezas_min;
                            sumaMax += data[0].total_piezas_max;
                        }
                        catch (error) {
                            console.log(error)
                        }
                    },
                    error: function (textStatus, errorThrown) {
                        console.log(errorThrown)
                    },
                    async: false
                });

            });


            $('#pieces').val(sumaPiezas);
            $('#unrestricted').val(sumaUnrestricted);
            $('#blocked').val(sumaBlocked);
            $('#in_quality').val(sumaQuality);
            $('#total_piezas_min').val(sumaMin);
            $('#total_piezas_max').val(sumaMax);
        }



        //variable global para el id
        var num = 0;
        //variable global de los select
        var textoSelect = $("#selects").html();

        //agreaga una fila para lotes
        function AgregarConcepto() {
            //obtine los valores de lotes


            $("#div_fallas").append(

                `
                                    <div class="form-group row" id="div_fallas_`+ num + `">
                                                    <label class="control-label col-md-1" for="etiquetas[`+ num + `].id">
                                                        <span class="float-right">Etiqueta</span>
                                                    </label>
                                                    <div class="col-md-10">
                                                            <select name="etiquetas[`+ num + `].id" id="etiquetas[` + num + `].id" class="categoria form-control select2bs4" style = "width:100%" required>
                                                            `+ textoSelect + `
                                                        </select >
                                                        <span class="field-validation-valid text-danger" data-valmsg-for="etiquetas[` + num + `].id" data-valmsg-replace="true"></span>
                                                    </div>

                                                    <div class="col-md-1">
                                                        <input type="button" value="Borrar" class="btn btn-danger" onclick="borrarPieza(` + num + `); return false;">
                                                    </div>
                                        </div>
                                                                                                                        `
            );
            $("#div_fallas_" + num).hide().fadeIn(500);



            // Initialize Select2 Elements (debe ir después de asignar el valor)
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })
            asignaEventosInput();
            $("#altura").change();
            num++;
        }

        //borra un lote
        function borrarPieza(id) {

            $("#div_fallas_" + id).fadeOut(0, function () {
                $(this).remove();
            });
            calculaValores();
        }



        window.onload = function () {
            clicMenu(0);
        }
    </script>
}
