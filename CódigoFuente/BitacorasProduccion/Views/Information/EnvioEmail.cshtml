@model Portal_2_0.Models.EnvioCorreoViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Envío de correo";
    ViewBag.ControllerName = "information";

    Clases.Util.MensajesSweetAlert mensajeAlerta = (Clases.Util.MensajesSweetAlert)ViewBag.MensajeAlert;

}


@section estilos
{
    <!-- DataTables -->
    @Styles.Render("~/Content/dataTables_css")
    <!-- SweetAlert2 -->
    <link href="@Url.Content("~/Content/vendors/sweetalert2-theme-bootstrap-4/bootstrap-4.min.css")" rel="stylesheet">
    <!-- Select2 -->
    <link href="@Url.Content("~/Content/vendors/select2/css/select2.css")" rel="stylesheet">
    <link href="@Url.Content("~/Content/vendors/select2-bootstrap4-theme/select2-bootstrap4.min.css")" rel="stylesheet">

}

@*Para SweetAlert*@
@if (mensajeAlerta != null)
{
    <input type="hidden" value="@mensajeAlerta.Mensaje" id="mensajeAlert" />
    <input type="hidden" value="@mensajeAlerta.getTipoMensaje()" id="mensajeAlertTipo" />
}


<div class="right_col" role="main">
    <div class="">
        <div class="page-title">
            <div class="title_left">
            </div>
        </div>

        <div class="clearfix"></div>

        <div class="row">
            <div class="col-md-12 col-sm-12 ">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>@ViewBag.Title</h2>
                        <ul class="nav navbar-right panel_toolbox">
                            @*Utilizado para mover a la derecha los iconos del card*@
                            <span style="visibility:hidden">_______</span>
                            <li>
                                <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                            </li>
                        </ul>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal form-label-left" }))
                        {
                            @Html.AntiForgeryToken()

                            if (!Html.ViewData.ModelState.IsValid)
                            {
                                <div class="alert alert-danger" role="alert">
                                    @Html.ValidationSummary("", new { @class = "text-white" })
                                </div>
                            }
                            <div class="item form-group">
                                @Html.LabelFor(model => model.nombreRemitente, new { @class = "col-form-label col-md-2 col-sm-2 label-align" })
                                <div class="col-md-6 col-sm-6 ">
                                    @Html.EditorFor(model => model.nombreRemitente, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.nombreRemitente, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="item form-group">
                                @Html.LabelFor(model => model.correoRemitente, new { @class = "col-form-label col-md-2 col-sm-2 label-align" })
                                <div class="col-md-4 col-sm-4 ">
                                    @Html.EditorFor(model => model.correoRemitente, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.correoRemitente, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="item form-group">
                                @Html.LabelFor(model => model.asunto, new { @class = "col-form-label col-md-2 col-sm-2 label-align" })
                                <div class="col-md-6 col-sm-6 ">
                                    @Html.EditorFor(model => model.asunto, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.asunto, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="ln_solid"></div>
                            <div class="form-group row">
                                <span><b>Correos CCO</b></span>
                            </div>
                            int i = 0;
                            foreach (var correo in Model.ccList)
                            {
                                <div class="item form-group">
                                    <label for="ccList[@i]" class="col-form-label col-md-2 col-sm-2 label-align">CC @(i+1)</label>
                                    <div class="col-md-6 col-sm-6 ">
                                        <input type="hidden" name="ccList.Index" id="ccList.Index" value="@i" />
                                        <input type="email" name="ccList[@i]" class="form-control" autocomplete="off" value="@correo" />
                                    </div>
                                </div>
                                i++;
                            }

                            <div class="ln_solid"></div>
                            <div class="form-group row">
                                <span><b>Mensaje</b></span>
                            </div>
                            <div class="item form-group">
                                @Html.LabelFor(model => model.mensaje, new { @class = "control-label col-md-12 col-sm-12", @style = "text-align:left" })

                            </div>
                            <div class="item form-group">
                                <div class="col-md-12">
                                    @Html.TextAreaFor(model => model.mensaje, new { @class = "form-control", @rows = "30", @autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.mensaje, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="ln_solid"></div>
                            <div class="item form-group">
                                <div class="col-md-12 col-sm-12">
                                    <button type="button" id="btn-ok" class="btn btn-success float-right">Enviar Correo</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <!-- SweetAlert2 -->
    @Scripts.Render(Url.Content("~/Content/vendors/sweetalert2/sweetalert2.min.js"))
    @Scripts.Render(Url.Content("~/Scripts/AlertasSweetAlert.js"))
    @Scripts.Render(Url.Content("~/Content/vendors/select2/js/select2.full.min.js"))
    @Scripts.Render("~/bundles/dataTables_js")

    <script>

        $(document).ready(function () {


            // Initialize Select2 Elements (debe ir después de asignar el valor)
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            //maneja el envió el del formulario
            $('form #btn-ok').click(function (e) {
                let $form = $(this).closest('form');

                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false,
                })


                swalWithBootstrapButtons.fire({
                    title: '¿Desea Continuar?',
                    html: "Se enviará el correo electrónico a los destinatarios seleccionados.",
                    showCancelButton: true,
                    confirmButtonText: 'Aceptar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.value) {
                        //espera a que se cierre el modal para enviar el formulario
                        setTimeout(function () {
                            $form.submit();
                        }, 900);
                    }
                });


            });

        });

        //agranda el tamaño de la barra
        window.onload = function () {
            clicMenu(1);
        }


    </script>

}

