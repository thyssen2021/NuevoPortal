@model Portal_2_0.Models.SCDM_solicitud
@using Clases.Util;

@{
    //determina si es la vista detalles
    bool details = ViewBag.Details != null ? (bool)ViewBag.Details : false;

    ViewBag.Title = details ? "Detalles de la solicitud" : "Editar Solicitud de Maestro de Materiales";
    ViewBag.PrimerNivel = "scdm_mm";
    ViewBag.SegundoNivel = "mis_solicitudes_mm";

    ViewBag.ControllerName = ViewContext.RouteData.Values["controller"];
    Clases.Util.MensajesSweetAlert mensajeAlerta = (Clases.Util.MensajesSweetAlert)ViewBag.MensajeAlert;
    String mensajeError = (string)ViewBag.MensajeError;

    //puede editar
    bool puedeEditar = !Model.SCDM_solicitud_asignaciones.Any() //creada
                                                                //existe una asignación para el solicitante
                                || (Model.SCDM_solicitud_asignaciones.Any(x => x.fecha_cierre == null && x.fecha_rechazo == null && x.descripcion == Bitacoras.Util.SCDM_solicitudes_asignaciones_tipos.ASIGNACION_SOLICITANTE)
                                     && (ViewBag.idEmpleadoLogeado != null && Model.id_solicitante == (int)ViewBag.idEmpleadoLogeado)
                                    )
                                || User.IsInRole(TipoRoles.SCDM_MM_ADMINISTRADOR);

    ViewBag.nav_style = "nav-sm";

    int idEmpleadoDepartamento = (int)ViewBag.EmpleadoDepartamento;

    //obtiene y convierte a entero el tipo de vista
    string viewUserText = !String.IsNullOrEmpty(Request.Params["viewUser"]) ? Request.Params["viewUser"] : string.Empty;
    int viewUser = 0;
    if (!String.IsNullOrEmpty(viewUserText))
    {
        viewUser = Int32.Parse(viewUserText);
    }
    //indica si hay asignaciones pendientes
    bool asignacionesPendientes = Model.SCDM_solicitud_asignaciones.Any(x => x.fecha_cierre == null && x.fecha_rechazo == null && x.descripcion != Bitacoras.Util.SCDM_solicitudes_asignaciones_tipos.ASIGNACION_SCDM);

    List<Portal_2_0.Models.SCDM_cat_departamentos_asignacion> departamentos = (List<Portal_2_0.Models.SCDM_cat_departamentos_asignacion>)ViewBag.ListadoDepartamentos;

    bool solicitudCerradaDepartamento = ViewBag.SolicitudCerrada == null ? false : (bool)ViewBag.SolicitudCerrada;

}

@section estilos
{
    <!-- DataTables -->
    @Styles.Render("~/Content/dataTables_css")

    <!-- Select2 -->
    <link href="@Url.Content("~/Content/vendors/select2/css/select2.css")" rel="stylesheet">
    <link href="@Url.Content("~/Content/vendors/select2-bootstrap4-theme/select2-bootstrap4.min.css")" rel="stylesheet">
    <!-- iCheck -->
    <link href="@Url.Content("~/Content/vendors/iCheck/skins/flat/green.css")" rel="stylesheet">
    <!--Handsontable -->
    <link href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" rel="stylesheet">
    <link href="~/Content/css/HansontableHeaderColors.css" rel="stylesheet" />
    <link href="~/Content/timeline.css" rel="stylesheet" />
    <style>
        .btn-cambios {
            display: inline-block;
            color: #edecec;
            border: 1px solid #CCc;
            background: #009ff5;
            box-shadow: 0 0 5px -1px rgba(0,0,0,0.2);
            cursor: pointer;
            vertical-align: middle;
            width: 99%;
            height: 80%;
            border-radius: 5px;
            padding: 0px;
            text-align: center;
        }

        dl {
            border: 3px double #ccc;
            padding: 0.5em;
            background-color: #fffdf0
        }

        dt {
            font-weight: bold;
            color: green;
        }

        dd {
            font-weight: bold;
            color: #454545;
        }

        dt::after {
            content: ":";
        }

        .fondo_verde > td {
            background-color: green;
            color: #fffdf0;
            font-weight: bolder;
        }

        .fondo_amarillo > td {
            background-color: orange;
            color: #221f1f;
            font-weight: bolder;
        }

        .fondo_rojo > td {
            background-color: red;
            color: #fffdf0;
            font-weight: bolder;
        }

        input {
            text-align: right;
        }

        /**
        * Accordion example styles
        */

        /**
         * Accordion example styles
         */

        .wf-accordion-group {
            margin-top: 15px;
        }

            /* All elements succeeding an accordion group use margin-top to create white space */
            .wf-accordion-group + * {
                margin-top: 30px;
            }

        /* All accordions have borders… */
        .wf-accordion {
            border-top: 1px solid #bfbfbf;
            border-bottom: 1px solid #bfbfbf;
            border-left: 1px solid #bfbfbf;
            border-right: 1px solid #bfbfbf;
        }

            /* …unless they directly succeed another accordion, in which case we reset the top-border
          to avoid duplicate white space */
            .wf-accordion + .wf-accordion {
                border-top-width: 0;
            }

        .wf-accordion__header {
            color: #616163;
        }

        /* Please note: The trigger element is a <button> create via JS. To achieve consistent aesthetics,
           the native button styles have to be resetted here */
        .wf-accordion__trigger {
            /* baseline resets */
            background: transparent;
            border-width: 0;
            border-radius: 0;
            box-sizing: border-box;
            color: white;
            font-weight: bold;
            cursor: pointer;
            display: inline-block;
            font-size: inherit;
            letter-spacing: inherit;
            line-height: inherit;
            margin: 0;
            padding: 0;
            text-align: left;
            text-decoration: none;
            /* end of baseline resets */
            /* additional styles for the demo */
            display: block;
            padding: 10px 1.25em 10px 8px;
            position: relative;
            width: 100%;
        }

            .wf-accordion__trigger::after {
                content: '';
                border: solid #fff;
                border-width: 0 2px 2px 0;
                height: 0.5em;
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-60%) rotate(45deg);
                width: 0.5em;
            }

            .wf-accordion__trigger[aria-disabled=true] {
                cursor: not-allowed;
                opacity: 0.5;
            }

            .wf-accordion__trigger[aria-expanded=true]::after {
                transform: translateY(-30%) rotate(-135deg);
            }

            .wf-accordion__trigger:hover,
            .wf-accordion__trigger:focus {
                opacity: 0.8;
                /*  background: #f5f5f5;
                color: #161616;*/
            }

                .wf-accordion__trigger:hover::after,
                .wf-accordion__trigger:focus::after {
                    border-color: #fff;
                }

        .wf-accordion__panel {
            background-color: #fff;
            padding: 10px 8px;
        }

            .wf-accordion__panel[aria-hidden=true] {
                display: none;
            }

        .nuevo-material {
            background-color: yellow !important;
            color: #404040 !important;
            font-weight: bold !important;
        }

        .fondo-completado {
            background-color: #009ff5;
        }

        .fondo-info {
            background-color: #616163;
        }

        #example {
            width: 100%;
        }

        .alert {
            border-left: 4px solid #ef0101 !important;
            border-top: 1px solid #ef0101 !important;
            border-right: 1px solid #ef0101 !important;
            border-bottom: 1px solid #ef0101 !important;
            background-color: #ef01010d !important;
            margin-bottom: 2px !important;
        }

        .alert-warning {
            border-left: 4px solid #ff9924 !important;
            border-top: 1px solid #ff9924 !important;
            border-right: 1px solid #ff9924 !important;
            border-bottom: 1px solid #ff9924 !important;
            background-color: #ff99240d !important;
            margin-bottom: 2px !important;
            color: dimgrey;
        }

        .alert-info {
            border-left: 4px solid #009ff5 !important;
            border-top: 1px solid #009ff5 !important;
            border-right: 1px solid #009ff5 !important;
            border-bottom: 1px solid #009ff5 !important;
            background-color: #009ff50d !important;
            margin-bottom: 2px !important;
            color: dimgrey;
        }


        .alert-warning-content {
            margin: 0;
            font-size: 14px;
            color: #de0000 !important;
        }

        .glow {
            color: red;
            animation: glow 0.7s ease-in-out infinite alternate;
            /*background-color: #f7c3bd;*/
            font-weight: bold;
        }

        @@-webkit-keyframes glow {
            from {
                text-shadow: 0 0 2px #fff, 0 0 4px #fff, 0 0 6px #f5a8a8, 0 0 8px #f5a8a8, 0 0 10px #f5a8a8, 0 0 12px #f5a8a8, 0 0 14px #f5a8a8;
            }

            to {
                text-shadow: 0 0 4px #fff, 0 0 6px #faccc6, 0 0 8px #faccc6, 0 0 10px #faccc6, 0 0 12px #faccc6, 0 0 14px #faccc6, 0 0 16px #faccc6;
            }
        }

        .pendiente {
            background-color: #ffd800;
            font-weight: bold;
        }

        .cerrada {
            background-color: #9ddc82;
            font-weight: bold;
        }

        .rechazada {
            background-color: #f1a097;
            font-weight: bold;
        }

        .incorrecta {
            background-color: #8abded;
            font-weight: bold;
        }
    </style>

}

@{Html.RenderPartial("_BlockUI", Model);}

@*Para SweetAlert*@
@if (mensajeAlerta != null)
{
    <input type="hidden" value="@mensajeAlerta.Mensaje" id="mensajeAlert" />
    <input type="hidden" value="@mensajeAlerta.getTipoMensaje()" id="mensajeAlertTipo" />
}

<div class="right_col" role="main">
    <div class="">

        <div class="clearfix"></div>

        <div class="row">
            <div class="col-md-12 col-sm-12  ">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>@ViewBag.Title</h2>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        <div class="col-sm-12">
                            <div class="card-box ">
                                <dl class="row">
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.id)</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_tipo_solicitud)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.SCDM_cat_tipo_solicitud.descripcion)</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_solicitante)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.empleados.ConcatNombre)</dd>
                                    @if (Model.SCDM_rel_solicitud_materiales_solicitados.Count > 0 && (Model.id_tipo_solicitud == 1 || Model.id_tipo_solicitud == 2 || Model.id_tipo_solicitud == 5))
                                    {
                                        <dt class="col-sm-2">Tipo de Materiales</dt>
                                        <dd class="col-sm-2">@String.Join(", ", @Model.SCDM_rel_solicitud_materiales_solicitados.Select(x => x.SCDM_cat_tipo_materiales_solicitud.descripcion).Distinct().ToList())</dd>
                                    }
                                    @if (Model.id_tipo_solicitud == 3)
                                    {
                                        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_tipo_cambio)</dt>
                                        <dd class="col-sm-2">@Html.DisplayFor(model => model.SCDM_cat_tipo_cambio.descripcion)</dd>
                                    }
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_prioridad)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.SCDM_cat_prioridad.descripcion)</dd>
                                    <dt class="col-sm-2">Plantas</dt>
                                    <dd class="col-sm-2">@String.Join(", ", @Model.SCDM_rel_solicitud_plantas.Select(x => x.plantas.descripcion).Distinct().ToList())</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.descripcion)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.descripcion)</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.justificacion)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.justificacion)</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.fecha_creacion)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.fecha_creacion)</dd>
                                </dl>
                            </div>
                        </div>
                        <div class="form-group">
                            @if (puedeEditar && !details)
                            {
                                <a href="@Url.Action("Edit", ViewBag.ControllerName, new { id = Model.id })" class="btn btn-success btn-sm float-right" style="color:white">
                                    <i class="fa-regular fa-pen-to-square"></i>
                                    Editar Datos Generales
                                </a>
                            }
                            else
                            {
                                //Deja una separación
                                <span style="color: #FFFF">.</span>
                            }
                            @if (User.IsInRole(TipoRoles.SCDM_MM_ADMINISTRADOR) && !details)
                            {
                                <button id="checklist-btn" class="btn btn-info btn-sm float-right">
                                    <i class="fa-solid fa-list-check"></i>
                                    Checklist
                                </button>
                            }
                        </div>

                        @if (details)
                        {
                            <div class="col-sm-12" style="color:#ffff">
                                .
                            </div>
                        }

                        <ul class="nav nav-tabs bar_tabs" id="myTab" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="main-tab" data-toggle="tab" href="#main" role="tab" aria-controls="main" aria-selected="true">Datos de la Solicitud</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="rechazos-tab" data-toggle="tab" href="#rechazos" role="tab" aria-controls="rechazos" aria-selected="false">Historial de Rechazos</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="movimientos-tab" data-toggle="tab" href="#movimientos" role="tab" aria-controls="movimientos" aria-selected="false">Historial de Movimientos</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="asignaciones-tab" data-toggle="tab" href="#asignaciones" role="tab" aria-controls="asignaciones" aria-selected="false">Asignaciones Actuales</a>
                            </li>
                        </ul>
                        <div class="tab-content" id="myTabContent">
                            <div class="tab-pane fade show active" id="main" role="tabpanel" aria-labelledby="main-tab">
                                <!-- INICIO TAB 1 -->
                                @if (Model.SCDM_solicitud_asignaciones.Any(x => x.fecha_rechazo != null))
                                {
                                    <div class="col-sm-12">
                                        <div class="alert alert-warning alert-2-secondary">
                                            <p class="alert-warning-content">
                                                <i class="fa-solid fa-triangle-exclamation" style="color: #ff9924;"></i> Esta solicitud ha sido rechazada previamente. Verifica que la razón de rechazo no afecte a tu actividad.
                                            </p>
                                            <br />
                                            Consulta la pestaña <a href="#" onclick="muestraRechazos()"><u>Historial de Rechazos</u></a> para más información.
                                        </div>
                                    </div>
                                }


                                @{ var asignacion = Model.SCDM_solicitud_asignaciones.LastOrDefault(x => x.id_departamento_asignacion == idEmpleadoDepartamento
                                                                          && x.descripcion == Bitacoras.Util.SCDM_solicitudes_asignaciones_tipos.ASIGNACION_DEPARTAMENTO
                                                                      );}
                                @if (asignacion != null && !string.IsNullOrEmpty(asignacion.comentario_scdm))
                                {
                                    <div class="col-sm-12">
                                        <div class="ln_solid"></div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="alert alert-warning alert-2-secondary">
                                            <p class="alert-warning-content">
                                                <i class="fa-solid fa-triangle-exclamation" style="color: #ff9924;"></i> Comentario SCDM:
                                            </p>
                                            <br />
                                            <p>
                                                @asignacion.comentario_scdm
                                            </p>

                                        </div>
                                    </div>
                                }



                                <div class="col-sm-12">
                                    <div class="ln_solid"></div>
                                    <div class="form-group row">
                                        <h4 style="color:#7c7c7c"><b>Elementos de la Solicitud</b></h4>
                                    </div>
                                </div>

                                <div class="col-md-12">
                                    @if (puedeEditar && !details)
                                    {
                                        <button type="submit" class="btn btn-info btn-sm float-lg-left" onclick="mostrarModalSecciones()">
                                            <svg width="18px" height="18px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M3 10V18C3 19.1046 3.89543 20 5 20H11M3 10V6C3 4.89543 3.89543 4 5 4H19C20.1046 4 21 4.89543 21 6V10M3 10H21M21 10V13" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M17 14V17M17 20V17M17 17H14M17 17H20" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> <circle cx="6" cy="7" r="1" fill="#ffffff"></circle> <circle cx="9" cy="7" r="1" fill="#ffffff"></circle> </g></svg>
                                            Agregar Elementos
                                        </button>
                                    }
                                </div>

                                @*Inicia acordeon*@
                                <div class="col-sm-12">
                                    <div class="wf-accordion-group js-accordion-group">
                                        @if (Model.SCDM_rel_solicitud_archivos.Any())
                                        {
                                            //Documentos soporte de la solicitud
                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-info" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Documentos Soporte</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    @foreach (var item in Model.SCDM_rel_solicitud_archivos)
                                                    {
                                                        <div class="form-group row" id="div_document_support_1">

                                                            <label class="col-md-1">Archivo:</label>
                                                            <div class="col-md-4">
                                                                <input type="text" class="form-control col-md-12" style="text-align: right;" value="@item.biblioteca_digital.Nombre" readonly>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <a href="@Url.Action("DownloadFile","Combos", new { idDocumento = item.id_archivo})" class="btn btn-success btm-sm" title="Download">
                                                                    <i class="fa fa-download"></i>
                                                                </a>
                                                                <a href="@Url.Action("DownloadFile","Combos", new { idDocumento = item.id_archivo, inline=true})" class="btn btn-info btm-sm" target="_blank" title="Inline">
                                                                    <i class="fa-regular fa-eye"></i>
                                                                </a>
                                                            </div>
                                                        </div>
                                                    }

                                                </div>
                                            </div>
                                        }

                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.LISTA_TECNICA))
                                        {
                                            // 1 = lista tecnica
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.LISTA_TECNICA).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Lista Técnica</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="lista_tecnica_text" style="display:none; color:red">No se definieron los componentes para la lista tecnica, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_lista_tecnica"></div>

                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>

                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">

                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditListaTecnica", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Agregar/Editar
                                                            </a>
                                                        }
                                                    </p>


                                                </div>

                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == 2))
                                        {
                                            //2 = formato compra
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.FORMATO_COMPRA).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Formato de Compra</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="formato_compra_text" style="display:none; color:red">No se encontraron elementos para el formato de compra, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_formato_compra"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditFormatoCompra", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Agregar/Editar
                                                            </a>
                                                        }
                                                    </p>


                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.ROLLO))
                                        {
                                            //3 = Rollo
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.ROLLO).comentario;


                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Rollo</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="rollos_text" style="display:none; color:red">No se encontraron elementos para rollo, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_rollos"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditRollo", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Agregar/Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CINTA))
                                        {
                                            //4 = Cinta
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CINTA).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Cinta</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="cintas_text" style="display:none; color:red">No se encontraron elementos para cintas, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_cintas"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditCintas", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Agregar/Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.PLATINA))
                                        {
                                            //5 = Platina
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.PLATINA).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Platina</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="platinas_text" style="display:none; color:red">No se encontraron elementos para platinas, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_platinas"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditPlatinas", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser , tipoPlatina = (int)Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.SHEARING))
                                        {
                                            //6 = Shearing
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.SHEARING).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Shearing</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="shearing_text" style="display:none; color:red">No se encontraron elementos para shearing, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_shearing"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditPlatinas", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser , tipoPlatina = (int)Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.SHEARING })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == 7))
                                        {
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.PLATINA_SOLDADA).comentario;

                                            //7 = Platina Soldada
                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Platina Soldada</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="platina_soldada_text" style="display:none; color:red">No se encontraron elementos para platina soldada, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_platina_soldada"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditPlatinas", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser , tipoPlatina = (int)Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA_SOLDADA })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.C_AND_B))
                                        {
                                            //8 = C&B
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.C_AND_B).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">C&B</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="copper_and_brass_text" style="display:none; color:red">No se encontraron elementos para Copper & Brass. Favor de agregarlos</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_copper_and_brass"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditCopperAndBrass", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == 9))
                                        {
                                            //9 = Cambio Descripcion PENDIENTE

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Cambio Descripci&oacute;n </button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    Cambio Descripción...
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CAMBIO_INGENIERIA))
                                        {
                                            //Cambio de ingeniería
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CAMBIO_INGENIERIA).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Cambio de Ingenier&iacute;a</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="hot_cambio_ingenieria_text" style="display:none; color:red">No se encontraron elementos para Cambios de Ingeniería. Favor de agregarlos</p>
                                                    <div id="hot_cambio_ingenieria"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditCambioIngenieria", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CAMBIO_ESTATUS))
                                        {
                                            //Cambio de estatus
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CAMBIO_ESTATUS).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Cambio de Estatus</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="hot_cambio_estatus_text" style="display:none; color:red">No se encontraron elementos para Cambios de Estatus. Favor de agregarlos</p>
                                                    <div id="hot_cambio_estatus"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditCambioEstatus", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>

                                                </div>
                                            </div>
                                        }

                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CREACION_REFERENCIA))
                                        {
                                            //CREACION CON REFERENCIA
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CREACION_REFERENCIA).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Creaci&oacute;n con referencia</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="creacion_referencia_text" style="display:none; color:red">No se encontraron elementos para la creación con referencia, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_creacion_referencia"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditCreacionReferencia", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.EXTENSION))
                                        {
                                            //SOLICITUD DE EXTENSIÓN
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.EXTENSION).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Extensión de Materiales</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="extension_text" style="display:none; color:red">No se encontraron elementos para la extensión, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_extension"></div>
                                                    @if (Model.SCDM_rel_solicitud_extension_almacenes_virtuales.Any())
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Almacen Virtual: </span>  <span style="font-weight:bold; color:blue;"> @(String.Join(",", Model.SCDM_rel_solicitud_extension_almacenes_virtuales.Select(x=>x.almacen_virtual))) </span>
                                                        </p>

                                                    }
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditExtension", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_rel_solicitud_secciones_activas.Any(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CAMBIO_BUDGET))
                                        {
                                            //CAMBIO EN DATOS DE BUDGET
                                            string comentario = Model.SCDM_rel_solicitud_secciones_activas.FirstOrDefault(x => x.id_seccion == (int)Bitacoras.Util.SCDMSeccionesSolicitud.CAMBIO_BUDGET).comentario;

                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Cambio de Datos de Budget</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="budget_text" style="display:none; color:red">No se encontraron elementos para la solicitud de cambio de datos de Budget, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_budget"></div>
                                                    @if (!string.IsNullOrEmpty(comentario))
                                                    {
                                                        <p style="padding-top:10px; font-size:15px;">
                                                            <span style="font-weight:bold; color:red;">Comentario Adicional: <br /></span>
                                                            @comentario
                                                        </p>
                                                    }
                                                    <p style="padding-bottom:10px;padding-top:10px;">
                                                        @if (puedeEditar && !details)
                                                        {
                                                            <a href="@Url.Action("EditBudget", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.SCDM_solicitud_rel_item_material.Any(x => x.SCDM_solicitud_rel_facturacion.Any()) || Model.SCDM_solicitud_rel_creacion_referencia.Any(x => x.SCDM_solicitud_rel_facturacion.Any())
                                        && (idEmpleadoDepartamento == (int)Bitacoras.Util.SCDM_departamentos_AsignacionENUM.FACTURACION || idEmpleadoDepartamento == (int)Bitacoras.Util.SCDM_departamentos_AsignacionENUM.SCDM)
                                        )
                                        {
                                            //Facturacion
                                            <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                                <div class="wf-accordion__header js-accordion__header">
                                                    <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Facturación</button></h3>
                                                </div>
                                                <div class="wf-accordion__panel js-accordion__panel" aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                                    <p id="facturacion_text" style="display:none; color:red">No se encontraron elementos para facturación, favor de agregarlos.</p>
                                                    <!--Ejemplo Handsontable-->
                                                    <div id="hot_facturacion"></div>
                                                    <p>
                                                        <br />
                                                        @if ((puedeEditar && !details) || (Model.SCDM_solicitud_asignaciones.Any(x => x.fecha_cierre == null && x.fecha_rechazo == null && x.id_departamento_asignacion == (int)Bitacoras.Util.SCDM_departamentos_AsignacionENUM.FACTURACION)))
                                                        {
                                                            <a href="@Url.Action("EditFacturacion", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-sm float-left" style="color:white">
                                                                <i class="fa-regular fa-pen-to-square"></i>
                                                                Editar
                                                            </a>
                                                        }
                                                    </p>
                                                    <div class="form-group row">

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>

                                @*Finaliza acordeon*@

                                <div class="col-md-12">
                                    <div class="ln_solid"></div>
                                    @*DEPTO ASIGNACION INCORRECTA *@
                                    @if (User.IsInRole(TipoRoles.SCDM_MM_APROBACION_SOLICITUDES) && (
                                         viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.DEPARTAMENTO)
                                        && !solicitudCerradaDepartamento
                                        && !details)
                                    {
                                        <button id="btn-asignacion-incorrecta-departamento" class="btn btn-warning btn-lg float-lg-left" style="color:dimgray">
                                            <svg width="28px" height="28px" viewBox="0 0 24 24" stroke="#707070" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M16 20.2476L20.2374 16M13 3H8.2C7.0799 3 6.51984 3 6.09202 3.21799C5.71569 3.40973 5.40973 3.71569 5.21799 4.09202C5 4.51984 5 5.0799 5 6.2V17.8C5 18.9201 5 19.4802 5.21799 19.908C5.40973 20.2843 5.71569 20.5903 6.09202 20.782C6.51984 21 7.0799 21 8.2 21H11.5M13 3L19 9M13 3V7.4C13 7.96005 13 8.24008 13.109 8.45399C13.2049 8.64215 13.3578 8.79513 13.546 8.89101C13.7599 9 14.0399 9 14.6 9H19M19 9V11M9 17H11.5M9 13H13M9 9H10M21 18C21 19.6569 19.6569 21 18 21C16.3431 21 15 19.6569 15 18C15 16.3431 16.3431 15 18 15C19.6569 15 21 16.3431 21 18Z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                                            Asignación incorrecta
                                        </button>
                                    }
                                    @*DEPTO APRUEBA SOLICITUD*@
                                    @if (User.IsInRole(TipoRoles.SCDM_MM_APROBACION_SOLICITUDES) && (
                                        viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.DEPARTAMENTO_INICIAL
                                        || viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.DEPARTAMENTO)
                                        && !solicitudCerradaDepartamento
                                        && !details)
                                    {
                                        <button id="btn-aprobar-departamento" class="btn btn-primary btn-lg float-lg-right">
                                            <svg fill="#ffffff" width="28px" height="28px" viewBox="0 0 56 56" xmlns="http://www.w3.org/2000/svg" stroke="#FFFF00"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M 23.6641 52.3985 C 26.6407 55.375 29.3594 55.3516 32.3126 52.3985 L 35.9219 48.8125 C 36.2969 48.4610 36.6250 48.3203 37.1172 48.3203 L 42.1797 48.3203 C 46.3749 48.3203 48.3204 46.3985 48.3204 42.1797 L 48.3204 37.1172 C 48.3204 36.625 48.4610 36.2969 48.8124 35.9219 L 52.3749 32.3125 C 55.3749 29.3594 55.3514 26.6407 52.3749 23.6641 L 48.8124 20.0547 C 48.4610 19.7031 48.3204 19.3516 48.3204 18.8829 L 48.3204 13.7969 C 48.3204 9.625 46.3985 7.6563 42.1797 7.6563 L 37.1172 7.6563 C 36.6250 7.6563 36.2969 7.5391 35.9219 7.1875 L 32.3126 3.6016 C 29.3594 .6250 26.6407 .6485 23.6641 3.6016 L 20.0547 7.1875 C 19.7032 7.5391 19.3516 7.6563 18.8828 7.6563 L 13.7969 7.6563 C 9.6016 7.6563 7.6563 9.5782 7.6563 13.7969 L 7.6563 18.8829 C 7.6563 19.3516 7.5391 19.7031 7.1876 20.0547 L 3.6016 23.6641 C .6251 26.6407 .6485 29.3594 3.6016 32.3125 L 7.1876 35.9219 C 7.5391 36.2969 7.6563 36.625 7.6563 37.1172 L 7.6563 42.1797 C 7.6563 46.3750 9.6016 48.3203 13.7969 48.3203 L 18.8828 48.3203 C 19.3516 48.3203 19.7032 48.4610 20.0547 48.8125 Z M 26.2891 49.7734 L 21.8828 45.3438 C 21.3672 44.8047 20.8282 44.5938 20.1016 44.5938 L 13.7969 44.5938 C 11.7110 44.5938 11.3828 44.2656 11.3828 42.1797 L 11.3828 35.875 C 11.3828 35.1719 11.1719 34.6329 10.6563 34.1172 L 6.2266 29.7109 C 4.7501 28.2109 4.7501 27.7891 6.2266 26.2891 L 10.6563 21.8829 C 11.1719 21.3672 11.3828 20.8282 11.3828 20.1016 L 11.3828 13.7969 C 11.3828 11.6875 11.6876 11.3829 13.7969 11.3829 L 20.1016 11.3829 C 20.8282 11.3829 21.3672 11.1953 21.8828 10.6563 L 26.2891 6.2266 C 27.7891 4.7500 28.2110 4.7500 29.7110 6.2266 L 34.1172 10.6563 C 34.6328 11.1953 35.1719 11.3829 35.8750 11.3829 L 42.1797 11.3829 C 44.2657 11.3829 44.5938 11.7109 44.5938 13.7969 L 44.5938 20.1016 C 44.5938 20.8282 44.8282 21.3672 45.3439 21.8829 L 49.7733 26.2891 C 51.2498 27.7891 51.2498 28.2109 49.7733 29.7109 L 45.3439 34.1172 C 44.8282 34.6329 44.5938 35.1719 44.5938 35.875 L 44.5938 42.1797 C 44.5938 44.2656 44.2657 44.5938 42.1797 44.5938 L 35.8750 44.5938 C 35.1719 44.5938 34.6328 44.8047 34.1172 45.3438 L 29.7110 49.7734 C 28.2110 51.2500 27.7891 51.2500 26.2891 49.7734 Z M 24.3438 39.2266 C 25.0235 39.2266 25.5391 38.9453 25.8907 38.5234 L 38.8985 20.3360 C 39.1563 19.9609 39.2969 19.5391 39.2969 19.1407 C 39.2969 18.1094 38.5001 17.2891 37.4219 17.2891 C 36.6485 17.2891 36.2266 17.5469 35.7579 18.2266 L 24.2735 34.3985 L 18.3438 27.8594 C 17.9454 27.4141 17.5001 27.2266 16.9141 27.2266 C 15.7657 27.2266 14.9454 28.0000 14.9454 29.0782 C 14.9454 29.5469 15.1094 29.9922 15.4376 30.3203 L 22.8907 38.6172 C 23.2423 38.9922 23.6876 39.2266 24.3438 39.2266 Z"></path></g></svg>
                                            Aprobar solicitud
                                        </button>
                                    }
                                    @*DEPTO RECHAZA SOLICITUD*@
                                    @if (User.IsInRole(TipoRoles.SCDM_MM_APROBACION_SOLICITUDES) && (
                                        viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.DEPARTAMENTO_INICIAL
                                        || viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.SCDM
                                        || viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.DEPARTAMENTO)
                                        && !details
                                        )
                                    {
                                        if (viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.SCDM)
                                        {
                                            <a href="@Url.Action("AsignarTareas", ViewBag.ControllerName, new { id = Model.id })" class="btn btn-danger btn-lg float-right" style="color:white">
                                                <svg width="28px" height="28px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M17 17L21 21M21 17L17 21M13 3H8.2C7.0799 3 6.51984 3 6.09202 3.21799C5.71569 3.40973 5.40973 3.71569 5.21799 4.09202C5 4.51984 5 5.0799 5 6.2V17.8C5 18.9201 5 19.4802 5.21799 19.908C5.40973 20.2843 5.71569 20.5903 6.09202 20.782C6.51984 21 7.0799 21 8.2 21H13M13 3L19 9M13 3V7.4C13 7.96005 13 8.24008 13.109 8.45399C13.2049 8.64215 13.3578 8.79513 13.546 8.89101C13.7599 9 14.0399 9 14.6 9H19M19 9V14M9 17H13M9 13H15M9 9H10" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                                                Rechazar Solicitud
                                            </a>
                                        }
                                        else if (!solicitudCerradaDepartamento)
                                        {
                                            <button id="btn-rechazar" class="btn btn-danger btn-lg float-lg-right">
                                                <svg width="28px" height="28px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M17 17L21 21M21 17L17 21M13 3H8.2C7.0799 3 6.51984 3 6.09202 3.21799C5.71569 3.40973 5.40973 3.71569 5.21799 4.09202C5 4.51984 5 5.0799 5 6.2V17.8C5 18.9201 5 19.4802 5.21799 19.908C5.40973 20.2843 5.71569 20.5903 6.09202 20.782C6.51984 21 7.0799 21 8.2 21H13M13 3L19 9M13 3V7.4C13 7.96005 13 8.24008 13.109 8.45399C13.2049 8.64215 13.3578 8.79513 13.546 8.89101C13.7599 9 14.0399 9 14.6 9H19M19 9V14M9 17H13M9 13H15M9 9H10" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                                                Rechazar @(viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.SCDM ? "(Reenvía a Solicitante)" : string.Empty)
                                            </button>
                                        }
                                    }
                                    @*SCDM ASIGNA SOLICITUDES Y FINALIZA*@
                                    @if (User.IsInRole(TipoRoles.SCDM_MM_ADMINISTRADOR) && !details)
                                    {
                                        <a href="@Url.Action("AsignarTareas", ViewBag.ControllerName, new { id = Model.id })" class="btn btn-primary btn-lg float-right" style="color:white">
                                            Finalizar Solicitud
                                        </a>

                                        <a href="@Url.Action("AsignarTareas", ViewBag.ControllerName, new { id = Model.id, viewUser = viewUser  })" class="btn btn-success btn-lg float-lg-right" style="color:white">
                                            <i class="fa-solid fa-user-tag"></i>
                                            Asignar Tareas
                                        </a>

                                    }
                                    @*SCDM RECHAZA SOLICITUD*@

                                    @*Envia la solicitud creada a SCDM o depto*@
                                    @if (User.IsInRole(TipoRoles.SCDM_MM_CREACION_SOLICITUDES) &&
                                            viewUser == (int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.SOLICITANTE
                                            && (!Model.SCDM_solicitud_asignaciones.Any() //creado
                                                                                         //o existe una solicitud abierta para el solicitante
                                            || Model.SCDM_solicitud_asignaciones.Any(x => x.fecha_cierre == null && x.fecha_rechazo == null && x.descripcion == Bitacoras.Util.SCDM_solicitudes_asignaciones_tipos.ASIGNACION_SOLICITANTE)
                                            ) && !details
                                        )
                                    {
                                        <button type="submit" id="btn-enviar" class="btn btn-primary btn-lg float-lg-right"><i class="fa-solid fa-envelope-circle-check"></i> Enviar Solicitud</button>
                                    }
                                </div>
                                <!-- FIN TAB 1 -->
                            </div>
                            <div class="tab-pane fade" id="rechazos" role="tabpanel" aria-labelledby="rechazos-tab">
                                <!-- INICIO TAB 2 -->
                                @if (Model.SCDM_solicitud_asignaciones.Where(x => x.id_rechazo != null).Count() == 0)
                                {
                                    <div class="col-sm-12">
                                        <div class="alert alert-info" role="alert">
                                            Esta solicitud no tiene rechazos.
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    foreach (var rechazo in Model.SCDM_solicitud_asignaciones.Where(x => x.id_rechazo != null).OrderByDescending(x => x.fecha_rechazo))
                                    {
                                        <div class="col-sm-12" style="padding-top:12px;">
                                            <div class="alert alert-2-secondary">
                                                <p><b>Fecha de rechazo:</b> @Html.DisplayFor(model => rechazo.fecha_rechazo)</p>
                                                <p><b>Motivo de rechazo:</b> @Html.DisplayFor(model => rechazo.SCDM_cat_motivo_rechazo.descripcion)</p>
                                                <p>
                                                    <b>Rechazado por:</b> @Html.DisplayFor(model => rechazo.empleados2.ConcatNombre)
                                                    (@Html.DisplayFor(model => rechazo.SCDM_cat_departamentos_asignacion.descripcion))
                                                </p>
                                                <p><b>Comentario de rechazo:</b> @Html.DisplayFor(model => rechazo.comentario_rechazo)</p>

                                            </div>
                                        </div>

                                    }
                                }
                                <!-- FIN TAB 2 -->
                            </div>
                            <div class="tab-pane fade" id="movimientos" role="tabpanel" aria-labelledby="movimientos-tab">
                                <!-- INICIO TAB 3 -->
                                <timeline>
                                    <ul>

                                        @if (Model.SCDM_solicitud_asignaciones.Any()
                                            && !Model.SCDM_solicitud_asignaciones.Any(x => x.fecha_cierre == null && x.fecha_rechazo == null)
                                            && Model.SCDM_solicitud_asignaciones.Any(x => x.descripcion == Bitacoras.Util.SCDM_solicitudes_asignaciones_tipos.ASIGNACION_SCDM)
                                            )
                                        {

                                            var asignacion_cierre = Model.SCDM_solicitud_asignaciones.LastOrDefault(x => x.descripcion == Bitacoras.Util.SCDM_solicitudes_asignaciones_tipos.ASIGNACION_SCDM
                                           && x.fecha_cierre != null
                                           );

                                            <li style="--accent-color: #009ff5">
                                                <div class="date">Cierre de la solicitud</div>
                                                <div class="estatus" style="font-weight:bold;"><span style="font-weight:bold; color:#0064ac;">Fecha de cierre:</span> @asignacion_cierre.fecha_cierre </div>
                                                <div class="estatus" style="font-weight:bold;"><span style="font-weight:bold; color:#0064ac;">Cerrada por:</span> @Html.DisplayFor(model => asignacion_cierre.empleados1.ConcatNombre) </div>

                                                <div class="descr" style="font-weight:bold;"> Se finaliza la solicitud.</div>
                                            </li>
                                        }

                                        @foreach (var item in Model.SCDM_solicitud_asignaciones.OrderByDescending(x => x.fecha_asignacion))
                                        {
                                            <li style="--accent-color: #009ff5">
                                                <div class="date">Asignación a: @Html.DisplayFor(model => item.SCDM_cat_departamentos_asignacion.descripcion)</div>
                                                <div class="title"><span style="font-weight:bold; color:#0064ac;">Fecha de asignación:</span> @Html.DisplayFor(model => item.fecha_asignacion) </div>
                                                @if (item.fecha_cierre != null)
                                                {
                                                    <div class="estatus" style="font-weight:bold;"><span style="font-weight:bold; color:#0064ac;">Fecha de Cierre:</span> @Html.DisplayFor(model => item.fecha_cierre) </div>
                                                    <div class="estatus" style="font-weight:bold;"><span style="font-weight:bold; color:#0064ac;">Cerrado por:</span> @Html.DisplayFor(model => item.empleados1.ConcatNombre) </div>
                                                }
                                                @if (item.fecha_rechazo != null)
                                                {
                                                    <div class="estatus" style="font-weight:bold;"><span style="font-weight:bold; color:#0064ac;">Fecha de Rechazo:</span> @Html.DisplayFor(model => item.fecha_rechazo) </div>
                                                    <div class="estatus" style="font-weight:bold;"><span style="font-weight:bold; color:#0064ac;">Rechazado por:</span> @Html.DisplayFor(model => item.empleados2.ConcatNombre) </div>
                                                }
                                                <div class="estatus">
                                                    <span style="font-weight:bold; color:#0064ac;">Estatus Asignación:</span> <span style="font-weight:bold;color:#ea0000">
                                                        @(item.fecha_rechazo == null && item.fecha_cierre == null ? "Pendiente" : item.fecha_cierre != null ? "Cerrada" : "Rechazada")
                                                    </span>
                                                </div>

                                            </li>
                                        }
                                        @*Para creacion de la solicitud*@
                                        <li style="--accent-color: #009ff5">
                                            <div class="date">Creación de la solicitud</div>
                                            <div class="estatus"><span style="font-weight:bold; color:#0064ac;">Fecha de Creación:</span> @Model.fecha_creacion </div>
                                            <div class="estatus"><span style="font-weight:bold; color:#0064ac;">Creada por:</span> @Html.DisplayFor(model => Model.empleados.ConcatNombre) </div>

                                            <div class="descr" style="font-weight:bold;"> Se crea la solicitud.</div>
                                        </li>

                                    </ul>
                                </timeline>
                                <!-- FIN TAB 3 -->
                            </div>
                            <div class="tab-pane fade" id="asignaciones" role="tabpanel" aria-labelledby="asignaciones-tab">
                                <!-- INICIO TAB 4 -->
                                <table id="datatable_1" class="table dataTable table-striped table-bordered" cellspacing="0" width="100%">
                                    <thead>
                                        <tr>
                                            <th>
                                                @Html.DisplayNameFor(model => model.id)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.id_tipo_solicitud)
                                            </th>
                                            <th>
                                                Planta
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.id_solicitante)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.id_prioridad)
                                            </th>
                                            @foreach (var departamento in departamentos)
                                            {
                                                <th>
                                                    @departamento.descripcion
                                                </th>
                                            }
                                            <th>
                                                @Html.DisplayNameFor(model => model.EstatusSolicitud)
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => Model.id)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => Model.SCDM_cat_tipo_solicitud.descripcion)
                                            </td>
                                            <td>
                                                @String.Join(", ", Model.SCDM_rel_solicitud_plantas.Select(x => x.plantas.descripcion).Distinct().ToList())
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => Model.empleados.ConcatNombre)
                                            </td>
                                            <td class="@(Model.id_prioridad == 2? "glow":string.Empty)">
                                                @Html.DisplayFor(modelItem => Model.SCDM_cat_prioridad.descripcion)
                                            </td>
                                            @foreach (var departamento in departamentos)
                                            {
                                                TimeSpan? tiempoAsignacionAbierta = Model.GetTiempoAsignacion(departamento.id);
                                                TimeSpan? tiempoAsignacionCerrada = null;
                                                TimeSpan? tiempoAsignacionRechazada = null;
                                                TimeSpan? tiempoAsignacionIncorrecta = null;
                                                if (tiempoAsignacionAbierta == null)
                                                {
                                                    tiempoAsignacionCerrada = Model.GetTiempoAsignacionAprobada(departamento.id);
                                                }
                                                if (tiempoAsignacionAbierta == null && tiempoAsignacionCerrada == null)
                                                {
                                                    tiempoAsignacionRechazada = Model.GetTiempoAsignacionRechazada(departamento.id);
                                                }
                                                if (tiempoAsignacionRechazada == null && tiempoAsignacionAbierta == null && tiempoAsignacionCerrada == null)
                                                {
                                                    tiempoAsignacionIncorrecta = Model.GetTiempoAsignacionIncorrecta(departamento.id);
                                                }

                                                <td nowrap class="@(tiempoAsignacionAbierta.HasValue? "pendiente":
                                                    tiempoAsignacionCerrada.HasValue? "cerrada":
                                                    tiempoAsignacionRechazada.HasValue? "rechazada":
                                                    tiempoAsignacionIncorrecta.HasValue? "incorrecta":
                                                    string.Empty)">
                                                    @(tiempoAsignacionAbierta.HasValue? string.Format("{0}h {1}m", (int)tiempoAsignacionAbierta.Value.TotalHours, tiempoAsignacionAbierta.Value.Minutes) :
                                                    tiempoAsignacionCerrada.HasValue ? string.Format("{0}h {1}m", (int)tiempoAsignacionCerrada.Value.TotalHours, tiempoAsignacionCerrada.Value.Minutes) :
                                                    tiempoAsignacionRechazada.HasValue ? string.Format("{0}h {1}m", (int)tiempoAsignacionRechazada.Value.TotalHours, tiempoAsignacionRechazada.Value.Minutes) :
                                                    tiempoAsignacionIncorrecta.HasValue ? string.Format("{0}h {1}m", (int)tiempoAsignacionIncorrecta.Value.TotalHours, tiempoAsignacionIncorrecta.Value.Minutes) :
                                                    "--")
                                                </td>
                                            }
                                            <td>
                                                @Html.DisplayFor(modelItem => Model.estatusTexto)
                                            </td>

                                        </tr>

                                    </tbody>
                                </table>

                                <!-- FIN TAB 4 -->
                            </div>


                        </div>


                    </div>
                </div>
                <div>
                    <br />
                    <a onclick="volverAtras()" style="color:white" class="btn btn-round btn-info btm-sm" title="Volver">
                        <i class="fa fa-arrow-circle-left"></i> Volver al listado
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Modal Agregar elemento -->
<div class="modal fade" id="modalSecciones" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="exampleModalLongTitle">Agregar Elemento</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("AddSeccion", null, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.id)
                <input type="hidden" name="viewUser" value="@viewUserText" />


                <div class="modal-body">
                    <div class="form-group row">
                        <h6>Seleccione de la lista la secci&oacute;n que desea agregar a la solicitud</h6>
                    </div>


                    <div class="form-group row">
                        <div class="col-md-12">
                            @Html.DropDownList("secciones", null, htmlAttributes: new { @class = "select2bs4 col-md-12", @style = "width:100%", @required = "required" })
                            <span class="field-validation-valid text-danger" data-valmsg-for="secciones" data-valmsg-replace="true"></span>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Continuar</button>
                </div>
            }
        </div>
    </div>
</div>


<!-- Envia Solicitud Inicio -->
<div class="modal fade" id="modalEnviar" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="exampleModalLongTitle">¿Desea enviar esta solicitud?</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("EnviaSolicitudInicio", null, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.id)

                <input type="hidden" name="revisaFormato" value="@ViewBag.revisaFormato" />
                <input type="hidden" name="revisaDepartamento" value="@ViewBag.revisaDepartamento" />
                <input type="hidden" name="viewUser" value="@viewUserText" />
                <div class="modal-body">
                    <div class="form-group row">
                        <p>
                            La solicitud será enviada a:<br />  @Html.Raw(ViewBag.revisaNombre != null ? ViewBag.revisaNombre : "NO DISPONIBLE")
                            <br /> <br /> No podrá hacer cambios una vez enviada la solicitud.
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Continuar</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal checklist creacion con referencia -->
<div class="modal fade" id="modalCheckCreacionReferencia" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="exampleModalLongTitle">Checklist creación con referencia</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @{Html.RenderPartial("~/Views/SCDM_solicitud/_cheklist_creacion_materiales_referencia.cshtml", Model);}
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Aceptar</button>
                @*<button type="submit" class="btn btn-primary">Continuar</button>*@
            </div>

        </div>
    </div>
</div>

<!-- Aprueba Solicitud Departamento -->
<div class="modal fade" id="modalApruebaSolicitudDepartamento" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="exampleModalLongTitle">¿Desea enviar esta solicitud?</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("ApruebaSolicitudDepartamento", null, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.id)
                <div class="modal-body">
                    <input type="hidden" name="revisaFormato" value="@ViewBag.revisaFormato" />
                    <input type="hidden" name="revisaDepartamento" value="@ViewBag.revisaDepartamento" />
                    <input type="hidden" name="viewUser" value="@viewUser" />
                    <p>
                        La solicitud será enviada a:<br />  @Html.Raw(ViewBag.revisaNombre != null ? ViewBag.revisaNombre : "NO DISPONIBLE")
                        <br /> <br /> No podrá hacer cambios una vez enviada la solicitud.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Continuar</button>
                </div>
            }
        </div>
    </div>
</div>


<!-- Modal Rechazar -->
<div class="modal fade" id="modalRechazar" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Rechazar</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("RechazarSolicitud", null, FormMethod.Post, new { }))
            {
                <div class="modal-body">
                    <div class="form-group row">
                        <h6>¿Realmente desea rechazar esta solicitud?</h6>
                        <br />
                        <div class="col-md-12">
                            <h6>Razón de rechazo:</h6>
                        </div>
                        <div class="col-md-12">

                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.id)

                            <div class="form-group row">
                                <div class="col-md-12">
                                    @Html.DropDownList("id_motivo_rechazo", null, htmlAttributes: new { @class = "select2bs4 col-md-12", @style = "width:100%", @required = "required" })
                                    <span class="field-validation-valid text-danger" data-valmsg-for="id_motivo_rechazo" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <h6>Comentario:</h6>
                            </div>


                            @Html.TextAreaFor(model => model.comentario_rechazo, new { @class = "form-control", @rows = "4", @autocomplete = "off", @required = "required" })
                            @Html.ValidationMessageFor(model => model.comentario_rechazo, "", new { @class = "text-danger" })

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-warning">Rechazar</button>
                </div>
            }
        </div>
    </div>
</div>
<!-- Modal Asignación Incorrecta -->
<div class="modal fade" id="modalAsignacionIncorrecta" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Asignación Incorrecta</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("AsignacionIncorrecta", null, FormMethod.Post, new { }))
            {
                <div class="modal-body">
                    <div class="form-group row">
                        <br />
                        <div class="col-md-12">
                            <h6>Motivo de Asignación Incorrecta:</h6>
                        </div>
                        <div class="col-md-12">

                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.id)

                            <div class="form-group row">
                                <div class="col-md-12">
                                    @Html.DropDownList("id_motivo_asignacion_incorrecta", null, htmlAttributes: new { @class = "select2bs4 col-md-12", @style = "width:100%", @required = "required" })
                                    <span class="field-validation-valid text-danger" data-valmsg-for="id_motivo_rechazo" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <h6>Comentario:</h6>
                            </div>

                            @Html.TextAreaFor(model => model.comentario_asignacion_incorrecta, new { @class = "form-control", @rows = "4", @autocomplete = "off", @required = "required" })
                            @Html.ValidationMessageFor(model => model.comentario_asignacion_incorrecta, "", new { @class = "text-danger" })

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-warning">Enviar</button>
                </div>
            }
        </div>
    </div>
</div>
<!-- Modal Finalizar Solicitud -->
<div class="modal fade" id="modalFinalizar" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Finalizar Solicitud</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("FinalizarSolicitud", null, FormMethod.Post, new { }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.id)
                <div class="modal-body">
                    <div class="form-group row">
                        <h6>¿Realmente desea finalizar esta solicitud?</h6>
                        <br />
                        <div class="col-md-12">
                            <br />
                            <h6>Al finalizar la solicitud se enviará notificación a todos los departamentos involucrados.</h6>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary"><i class="fa-solid fa-check-to-slot"></i> Finalizar</button>
                </div>
            }
        </div>
    </div>
</div>
<!-- Modal Error Envio Solicitud -->
<div class="modal fade" id="modalErrorEnvio" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="exampleModalLongTitle" style="color:red"> <i class="fa-solid fa-triangle-exclamation"></i> ¡Aviso!</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="col-md-12">
                    <br />
                    <h5>@mensajeError</h5>
                </div>
            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>*@
                <button type="button" class="btn btn-danger" data-dismiss="modal"> Aceptar</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render(Url.Content("~/Content/vendors/jquery-iu/jquery-ui.min.js"))
    @Scripts.Render(Url.Content("~/Content/vendors/select2/js/select2.full.min.js"))
    @Scripts.Render("~/bundles/dataTables_js")
    <!-- SweetAlert2 (css incluido) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.3/sweetalert2.all.min.js" integrity="sha512-/iBgV43zPirSC0tue+PT/1VHGs7En24twBmT+sVMgn9PTaOpKfbgIyL5YsGKlbAIxcwz9S8W/YEnYjpIYj2Axw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    @Scripts.Render(Url.Content("~/Scripts/AlertasSweetAlert.js"))
    <!-- iCheck -->
    @Scripts.Render(Url.Content("~/Content/vendors/iCheck/icheck.min.js"))
    <script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.min.js"></script>
    <script src="~/Content/vendors/wfaccordion/wf.accordion.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <script>
        //variable para saber si ha cambiado el formulario y asi no se detenga por doble submit
        var documento_soporte_cambios = 1;

        $(document).ready(function () {

            if ("@true" == "@(!String.IsNullOrEmpty(mensajeError))") {
                $('#modalErrorEnvio').modal('show');
            }

            // Initialize Select2 Elements (debe ir después de asignar el valor)
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            //valida si la solicitud ya ha sido cerrada
            if ('@(solicitudCerradaDepartamento)' == '@(true)' && '@(viewUserText)' == '@((int)Bitacoras.Util.SCDM_tipo_view_edicionENUM.DEPARTAMENTO)'
            && '@(idEmpleadoDepartamento != (int)Bitacoras.Util.SCDM_departamentos_AsignacionENUM.SCDM)' == '@(true)'
            ) {
                Swal.fire({
                    title: "Aviso",
                    text: "Esta solicitud ya ha sido cerrada por el departamento.",
                    icon: "warning"
                });
            }

            //inicializa icheck
            $('input').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
                increaseArea: '20%' // optional
            });

            //inicializa los data table
            var tabla = $('#datatable_1').DataTable({
                "paging": false,
                "ordering": false,
                "searching": false,
                "scrollX": true,
                "info": false
            });

            // Listen for Bootstrap tab change
            $(document).on('shown.bs.tab', 'a[data-toggle="tab"]', function (e) {
                $.fn.dataTable.tables({ visible: true, api: true }).columns.adjust();
            });


            $("#btn-enviar").on("click", function () {
                $('#modalEnviar').modal('show');
            });
            $("#btn-rechazar").on("click", function () {
                $('#modalRechazar').modal('show');
            });
            $("#btn-aprobar-departamento").on("click", function () {
                $('#modalApruebaSolicitudDepartamento').modal('show');
            });
            //$("#btn-rechazar-departamento").on("click", function () {
            //    $('#modalRechazarDepartamento').modal('show');
            //});
            $("#btn-finalizar-solicitud").on("click", function () {
                $('#modalFinalizar').modal('show');
            });
            $("#btn-asignacion-incorrecta-departamento").on("click", function () {
                $('#modalAsignacionIncorrecta').modal('show');
            });

            $("#checklist-btn").on("click", function () {
                muestraComboChecklist();
            });

            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })

            try {
                inicializaHTRollos();
            }
            catch {
                console.log('No se pudo inicializar Rollos.')

            }
            try {
                inicializaHTCintas();
            }
            catch {
                console.log('No se pudo inicializar Cintas.')
            }
            try {
                inicializaHTPlatinas(@Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA);
            }
            catch {
                console.log('No se pudo inicializar Cintas.')
            }

            try {
                 inicializaHTPlatinas(@Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.SHEARING);
            }
            catch {
                console.log('No se pudo inicializar Shearing.')
            }

            try {
                 inicializaHTPlatinas(@Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA_SOLDADA);
            }
            catch {
                console.log('No se pudo inicializar Shearing.')
            }
            try {
                inicializaHTCreacionReferencia();
            }
            catch {
                console.log('No se pudo inicializar Creación con Referencia.')
            }
            try {
                inicializaHTListaTecnica();
            }
            catch {
                console.log('No se pudo inicializar Lista Tecnica.')
            }
            try {
                inicializaHTFormatoCompra();
            }
            catch {
                console.log('No se pudo inicializar Tabla Formato de Compra.')
            }
            try {
                inicializaHTCopperAndBrass();
            }
            catch {
                console.log('No se pudo inicializar Tabla Copper and Brass.')
            }
            try {
                inicializaCambioIngenieria();
            }
            catch {
                console.log('No se pudo inicializar Tabla Cambio de Ingeniería.')
            }
            try {
                inicializaFacturacion();
            }
            catch {
                console.log('No se pudo inicializar Tabla Facturación.')
            }
            try {
                inicializaCambioEstatus();
            }
            catch {
                console.log('No se pudo inicializar Tabla Cambio de Estatus.')
            }
            try {
                inicializaExtension();
            }
            catch {
                console.log('No se pudo inicializar Tabla de Extensión de materiales.')
            }
            try {
                inicializaBudget();
            }
            catch {
                console.log('No se pudo inicializar Tabla de Budget.')
            }

            $.unblockUI();
        });

        async function muestraComboChecklist() {
            const { value: ck } = await Swal.fire({
                title: 'Tipo de checklist',
                input: 'select',
                inputOptions: {
                        creacion_materiales: 'Creación de materiales',
                        creacion_cb: 'Creación materiales C&B',
                        creacion_referencia: 'Creación con referencia',
                        extension: 'Extensión'
                    },
                inputPlaceholder: 'Selecciona una opción',
                showCancelButton: true,
                inputValidator: (value) => {
                    return new Promise((resolve) => {
                        if (value != '') {
                            resolve()
                        } else {
                            resolve('Selecciona una opción')
                        }
                    })
                }
            })

            if (ck) {
                MuestraChecklist(ck);
            }
        }

        function MuestraChecklist(opcion) {
            switch (opcion) {
                case 'creacion_materiales':
                    Swal.fire('Creacion M')
                    break;
                case 'creacion_cb':
                    Swal.fire('Creación C&B')
                    break;
                case 'creacion_referencia':
                    $('#modalCheckCreacionReferencia').modal('show');
                    break;
                case 'extension':
                    Swal.fire('Extensión')
                    break;
                default:
                    Swal.fire('Opción no reconocida')
            }
        }



        function inicializaHTRollos() {
            const container = document.querySelector('#hot_rollos');

            let colHeader = ['ID', 'Número Material', 'Material del cliente', 'Tipo de Venta', 'Núm. ODC cliente', 'Núm. cliente', 'Requiere PPAP\'s', 'Req. IMDS', 'Proveedor', 'Nombre Molino',
                'Tipo Metal', 'Unidad Base Medida', 'Grado/Calidad', 'Descripción Material (ES)', 'Descripción Material (EN)', 'Tipo de Material', '¿Aprovisionamiento?', 'Núm. parte del cliente',
                'Descripción núm. de parte', 'Norma de referencia', 'Espesor (mm)', 'Tolerancia espesor negativa (mm)', 'Tolerancia espesor positiva (mm)', 'Ancho (mm)', 'Tolerancia ancho negativa (mm)',
                'Tolerancia ancho positiva (mm)', 'Diametro interior (mm)', 'Diametro exterior máximo (mm)', 'Peso Min (KG)', 'Peso Max (KG)', 'Peso del recubrimiento', 'Parte Int/Ext', 'Posición del Rollo para embarque',
                'Programa IHS 1', 'Programa IHS 2', 'Programa IHS 3', 'Programa IHS 4', 'Programa IHS 5', 'Modelo de negocio', 'Transito', 'Procesadores Ext.', 'Número procesador Ext.', 'Núm. antigüo material',
                'Planicidad (mm)', 'MSA (Honda)', 'Req. conciliación Puntas y colas', 'Scrap permitido (%)', 'Fecha validez', 'Disponente asignado', 'Unidad Medida Ventas'
            ];

            var porcentajeCol = GetColFromName("Scrap permitido (%)", colHeader);

            hot = new Handsontable(container, {
                autoWrapRow: true,
                data: [],
                colHeaders: colHeader,
                afterGetColHeader: function (col, TH) {

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    switch (col) {
                        case -1:
                            applyClass(TH, 'HTgray');
                            break;
                        case GetColFromName("Número Material", colHeader):
                        case GetColFromName("Descripción Material (ES)", colHeader):
                        case GetColFromName("Descripción Material (EN)", colHeader):
                        case GetColFromName("Diametro exterior máximo (mm)", colHeader):
                        case GetColFromName("Peso Min (KG)", colHeader):
                        case GetColFromName("Peso Max (KG)", colHeader):
                            applyClass(TH, 'HTgreen');
                            break;
                        case GetColFromName("Núm. parte del cliente", colHeader):
                        case GetColFromName("Descripción núm. de parte", colHeader):
                        case GetColFromName("Espesor (mm)", colHeader):
                        case GetColFromName("Tolerancia espesor negativa (mm)", colHeader):
                        case GetColFromName("Tolerancia espesor positiva (mm)", colHeader):
                        case GetColFromName("Ancho (mm)", colHeader):
                        case GetColFromName("Tolerancia ancho negativa (mm)", colHeader):
                        case GetColFromName("Tolerancia ancho positiva (mm)", colHeader):
                        case GetColFromName("Núm. antigüo material", colHeader):
                        case GetColFromName("Planicidad (mm)", colHeader):
                        case GetColFromName("MSA (Honda)", colHeader):
                        case GetColFromName("Req. conciliación Puntas y colas", colHeader):
                        case GetColFromName("Scrap permitido (%)", colHeader):
                        case GetColFromName("Fecha validez", colHeader):
                        case GetColFromName("Disponente asignado", colHeader):
                            applyClass(TH, 'HTred');
                            break;
                        case GetColFromName("Material del cliente", colHeader):
                        case GetColFromName("Tipo de Venta", colHeader):
                        case GetColFromName("Núm. cliente", colHeader):
                        case GetColFromName("Requiere PPAP\'s", colHeader):
                        case GetColFromName("Req. IMDS", colHeader):
                        case GetColFromName("Proveedor", colHeader):
                        case GetColFromName("Nombre Molino", colHeader):
                        case GetColFromName("Tipo Metal", colHeader):
                        case GetColFromName("Unidad Base Medida", colHeader):
                        case GetColFromName("Grado/Calidad", colHeader):
                        case GetColFromName("Tipo de Material", colHeader):
                        case GetColFromName("¿Aprovisionamiento?", colHeader):
                        case GetColFromName("Diametro interior (mm)", colHeader):
                        case GetColFromName("Peso del recubrimiento", colHeader):
                        case GetColFromName("Parte Int/Ext", colHeader):
                        case GetColFromName("Posición del Rollo para embarque", colHeader):
                        case GetColFromName("Programa IHS 1", colHeader):
                        case GetColFromName("Programa IHS 2", colHeader):
                        case GetColFromName("Programa IHS 3", colHeader):
                        case GetColFromName("Programa IHS 4", colHeader):
                        case GetColFromName("Programa IHS 5", colHeader):
                        case GetColFromName("Modelo de negocio", colHeader):
                        case GetColFromName("Transito", colHeader):
                        case GetColFromName("Procesadores Ext.", colHeader):
                        case GetColFromName("Número procesador Ext.", colHeader):
                            applyClass(TH, 'HTPurple');
                            break;
                        case GetColFromName("Núm. ODC cliente", colHeader):
                        case GetColFromName("Norma de referencia", colHeader):
                        case GetColFromName("Unidad Medida Ventas", colHeader):
                            applyClass(TH, 'HTOrange');
                            break;
                        case 0: //columna fijada 
                            applyClass(TH, 'HTgreen');
                            break;
                    }

                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0], //contains ID
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                width: '100%',
                height: 'auto',
                readOnly: true,
                cells: function (row, col) {
                    let cp = {}
                    if (col === porcentajeCol) {
                        cp.renderer = myPercentage
                    }
                    if (col == GetColFromName("Número Material", colHeader)) {
                        cp.className = 'nuevo-material'
                    }
                    return cp
                },
            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaRollos',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {

                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data')
                                //oculta la tabla y muestra mensaje
                                $("#hot_rollos").hide();
                                $("#rollos_text").show();
                            } else { //existe información de rollos
                                hot.loadData(data);
                            }


                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });


            //congela la primera columna
            hot.getPlugin('manualColumnFreeze').freezeColumn(1);
            hot.render()
        }

        function muestraRechazos() {
            $('[href="#rechazos"]').tab('show');
            return false;
        }

        function inicializaHTCintas() {
            const container = document.querySelector('#hot_cintas');

            let colHeader = ['ID', 'Número Material', 'Material del cliente', 'Tipo de Venta', 'Núm. ODC cliente', 'Núm. cliente', 'Requiere PPAP\'s', 'Req. IMDS', 'Proveedor', 'Nombre Molino',
                'Tipo Metal', 'Unidad Base Medida', 'Grado/Calidad', 'Descripción Material (ES)', 'Descripción Material (EN)', 'Tipo de Material', '¿Aprovisionamiento?', 'Núm. parte del cliente',
                'Descripción núm. de parte', 'Norma de referencia', 'Cintas resultantes por rollo',
                'Espesor (mm)', 'Tolerancia espesor negativa (mm)', 'Tolerancia espesor positiva (mm)', 'Ancho Rollo(mm)', 'Ancho entrega Cinta(mm)', 'Tolerancia ancho negativa (mm)',
                'Tolerancia ancho positiva (mm)', 'Diametro interior entrada (mm)', 'Diametro interior salida (mm)', 'Diametro ext. cinta saliente Max (mm)', 'Peso Max. entrega cinta (KG)', 'Peso del recubrimiento', 'Parte Int/Ext', 'Posición del Rollo para embarque',
                'Programa IHS 1', 'Programa IHS 2', 'Programa IHS 3', 'Programa IHS 4', 'Programa IHS 5', 'Modelo de negocio', 'Procesadores Ext.', 'Número procesador Ext.', 'Núm. antigüo material',
                'Planicidad (mm)', 'MSA (Honda)', 'Fecha validez', 'Req. conciliación Puntas y colas', 'Scrap permitido (%)', 'Unidad Medida Ventas'
            ];

            var porcentajeCol = GetColFromName("Scrap permitido (%)", colHeader);

            hot = new Handsontable(container, {
                autoWrapRow: true,
                colHeaders:colHeader,
                afterGetColHeader: function (col, TH) {

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    switch (col) {
                        case -1:
                            applyClass(TH, 'HTgray');
                            break;
                        case GetColFromName("Número Material", colHeader):
                        case GetColFromName("Descripción Material (ES)", colHeader):
                        case GetColFromName("Descripción Material (EN)", colHeader):
                        case GetColFromName("Diametro ext. cinta saliente Max (mm)", colHeader):
                        case GetColFromName("Peso Max. entrega cinta (KG)", colHeader):
                            applyClass(TH, 'HTgreen');
                            break;
                        case GetColFromName("Descripción núm. de parte", colHeader):
                        case GetColFromName("Cintas resultantes por rollo", colHeader):
                        case GetColFromName("Espesor (mm)", colHeader):
                        case GetColFromName("Tolerancia espesor negativa (mm)", colHeader):
                        case GetColFromName("Tolerancia espesor positiva (mm)", colHeader):
                        case GetColFromName("Ancho Rollo(mm)", colHeader):
                        case GetColFromName("Ancho entrega Cinta(mm)", colHeader):
                        case GetColFromName("Tolerancia ancho negativa (mm)", colHeader):
                        case GetColFromName("Tolerancia ancho positiva (mm)", colHeader):
                        case GetColFromName("Núm. antigüo material", colHeader):
                        case GetColFromName("Planicidad (mm)", colHeader):
                        case GetColFromName("MSA (Honda)", colHeader):
                        case GetColFromName("Req. conciliación Puntas y colas", colHeader):
                        case GetColFromName("Scrap permitido (%)", colHeader):
                        case GetColFromName("Fecha validez", colHeader):
                        case GetColFromName("Núm. parte del cliente", colHeader):
                            applyClass(TH, 'HTred');
                            break;
                        case GetColFromName("Material del cliente", colHeader):
                        case GetColFromName("Tipo de Venta", colHeader):
                        case GetColFromName("Núm. cliente", colHeader):
                        case GetColFromName("Requiere PPAP\'s", colHeader):
                        case GetColFromName("Req. IMDS", colHeader):
                        case GetColFromName("Proveedor", colHeader):
                        case GetColFromName("Nombre Molino", colHeader):
                        case GetColFromName("Tipo Metal", colHeader):
                        case GetColFromName("Unidad Base Medida", colHeader):
                        case GetColFromName("Grado/Calidad", colHeader):
                        case GetColFromName("Tipo de Material", colHeader):
                        case GetColFromName("¿Aprovisionamiento?", colHeader):
                        case GetColFromName("Diametro interior entrada (mm)", colHeader):
                        case GetColFromName("Diametro interior salida (mm)", colHeader):
                        case GetColFromName("Posición del Rollo para embarque", colHeader):
                        case GetColFromName("Peso del recubrimiento", colHeader):
                        case GetColFromName("Parte Int/Ext", colHeader):
                        case GetColFromName("Programa IHS 1", colHeader):
                        case GetColFromName("Programa IHS 2", colHeader):
                        case GetColFromName("Programa IHS 3", colHeader):
                        case GetColFromName("Programa IHS 4", colHeader):
                        case GetColFromName("Programa IHS 5", colHeader):
                        case GetColFromName("Modelo de negocio", colHeader):
                        case GetColFromName("Procesadores Ext.", colHeader):
                        case GetColFromName("Número procesador Ext.", colHeader):
                            applyClass(TH, 'HTPurple');
                            break;
                        case GetColFromName("Núm. ODC cliente", colHeader):
                        case GetColFromName("Norma de referencia", colHeader):
                        case GetColFromName("Unidad Medida Ventas", colHeader):
                            applyClass(TH, 'HTOrange');
                            break;
                        case 0:
                            applyClass(TH, 'HTgreen');
                            break;
                    }

                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0], //contains ID
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                cells: function (row, col) {
                    let cp = {}
                    if (col === porcentajeCol) { //columna de porcentajes
                        cp.renderer = myPercentage
                    }
                    if (col == GetColFromName("Número Material", colHeader)) {
                        cp.className = 'nuevo-material'
                    }
                    return cp
                },
            });


            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
              //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaCintas',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data')
                                //oculta la tabla y muestra mensaje
                                $("#hot_cintas").hide();
                                $("#cintas_text").show();
                            } else { //existe información de rollos
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });

            //congela la primera columna
            hot.getPlugin('manualColumnFreeze').freezeColumn(1);
            hot.render()

        }

        function inicializaHTPlatinas(tipoPlatina) {

            let colHeader = ['ID', 'Número Material', 'Material del cliente', 'Tipo de Venta', 'Núm. ODC cliente', 'Núm. cliente', 'Requiere PPAP\'s', 'Req. IMDS',
                'Tipo Metal', 'Unidad Base Medida', 'Grado/Calidad', 'Descripción Material (ES)', 'Descripción Material (EN)', 'Tipo de Material', '¿Aprovisionamiento?', 'Núm. parte del cliente',
                'Descripción núm. de parte', 'Norma de referencia', 'Espesor (mm)', 'Tolerancia espesor negativa (mm)', 'Tolerancia espesor positiva (mm)', 'Ancho (mm)', 'Tolerancia ancho negativa (mm)',
                'Tolerancia ancho positiva (mm)', 'Avance (mm)', 'Tolerancia avance negativa (mm)', 'Tolerancia avance positiva (mm)', 'Forma', 'Pzas por Golpe', 'Pzas por paquete', 'Piezas por auto',
                'Peso Bruto (KG)', 'Peso Neto (KG)', 'Peso del recubrimiento', 'Parte Int/Ext', 'Peso Inicial', '% de Scrap (puntas y colas)', 'Programa IHS 1', 'Programa IHS 2', 'Programa IHS 3', 'Programa IHS 4', 'Programa IHS 5',
                'Nombre Molino', 'Modelo de negocio', 'Transito', 'Procesadores Ext.', 'Número procesador Ext.', 'Núm. antigüo material',
                'Planicidad (mm)', 'MSA (Honda)', 'Req. conciliación Puntas y colas', 'Scrap permitido (%)', 'Conciliacion Scrap Ingeniería', 'Fecha validez', 'Trapecio: ángulo A', 'Trapecio: ángulo B'
            ];
            let container;
            switch (tipoPlatina) {
                case @Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA:
                    container = document.querySelector('#hot_platinas');
                    break;
                case @Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.SHEARING:
                    container = document.querySelector('#hot_shearing');
                    break;
                 case @Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA_SOLDADA:
                    container = document.querySelector('#hot_platina_soldada');
                    break;
                default:
                    console.log(`No se encontró opción para platina tipo: ${tipoPlatina}.`);
            }



            //obtine el index de la columna con porcentaje
            var porcentajeCol = GetColFromName("% de Scrap (puntas y colas)", colHeader);
            var porcentajeCol2 = GetColFromName("Scrap permitido (%)", colHeader);

            hot = new Handsontable(container, {
                autoWrapRow: true,
                colHeaders: colHeader,
                afterGetColHeader: function (col, TH) {

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    switch (col) {
                        case -1:
                            applyClass(TH, 'HTgray');
                            break;
                        case GetColFromName("Número Material", colHeader):
                        case GetColFromName("Descripción Material (ES)", colHeader):
                        case GetColFromName("Descripción Material (EN)", colHeader):
                        case GetColFromName("Peso Inicial", colHeader):
                        case GetColFromName("% de Scrap (puntas y colas)", colHeader):
                            applyClass(TH, 'HTgreen');
                            break;
                        case GetColFromName("Descripción núm. de parte", colHeader):
                        case GetColFromName("Espesor (mm)", colHeader):
                        case GetColFromName("Tolerancia espesor negativa (mm)", colHeader):
                        case GetColFromName("Tolerancia espesor positiva (mm)", colHeader):
                        case GetColFromName("Ancho (mm)", colHeader):
                        case GetColFromName("Tolerancia ancho negativa (mm)", colHeader):
                        case GetColFromName("Tolerancia ancho positiva (mm)", colHeader):
                        case GetColFromName("Avance (mm)", colHeader):
                        case GetColFromName("Tolerancia avance negativa (mm)", colHeader):
                        case GetColFromName("Tolerancia avance positiva (mm)", colHeader):
                        case GetColFromName("Núm. antigüo material", colHeader):
                        case GetColFromName("Planicidad (mm)", colHeader):
                        case GetColFromName("MSA (Honda)", colHeader):
                        case GetColFromName("Req. conciliación Puntas y colas", colHeader):
                        case GetColFromName("Scrap permitido (%)", colHeader):
                        case GetColFromName("Fecha validez", colHeader):
                        case GetColFromName("Trapecio: ángulo A", colHeader):
                        case GetColFromName("Trapecio: ángulo B", colHeader):
                        case GetColFromName("Núm. parte del cliente", colHeader):
                        case GetColFromName("Pzas por Golpe", colHeader):
                        case GetColFromName("Pzas por paquete", colHeader):
                        case GetColFromName("Piezas por auto", colHeader):
                        case GetColFromName("Peso Bruto (KG)", colHeader):
                        case GetColFromName("Peso Neto (KG)", colHeader):
                        case GetColFromName("Conciliacion Scrap Ingeniería", colHeader):
                            applyClass(TH, 'HTred');
                            break;
                        case GetColFromName("Material del cliente", colHeader):
                        case GetColFromName("Tipo de Venta", colHeader):
                        case GetColFromName("Núm. cliente", colHeader):
                        case GetColFromName("Requiere PPAP\'s", colHeader):
                        case GetColFromName("Req. IMDS", colHeader):
                        case GetColFromName("Nombre Molino", colHeader):
                        case GetColFromName("Tipo Metal", colHeader):
                        case GetColFromName("Unidad Base Medida", colHeader):
                        case GetColFromName("Grado/Calidad", colHeader):
                        case GetColFromName("Tipo de Material", colHeader):
                        case GetColFromName("¿Aprovisionamiento?", colHeader):
                        case GetColFromName("Peso del recubrimiento", colHeader):
                        case GetColFromName("Parte Int/Ext", colHeader):
                        case GetColFromName("Programa IHS 1", colHeader):
                        case GetColFromName("Programa IHS 2", colHeader):
                        case GetColFromName("Programa IHS 3", colHeader):
                        case GetColFromName("Programa IHS 4", colHeader):
                        case GetColFromName("Programa IHS 5", colHeader):
                        case GetColFromName("Modelo de negocio", colHeader):
                        case GetColFromName("Transito", colHeader):
                        case GetColFromName("Procesadores Ext.", colHeader):
                        case GetColFromName("Número procesador Ext.", colHeader):
                        case GetColFromName("Forma", colHeader):
                            applyClass(TH, 'HTPurple');
                            break;
                        case GetColFromName("Núm. ODC cliente", colHeader):
                        case GetColFromName("Norma de referencia", colHeader):
                            applyClass(TH, 'HTOrange');
                            break;
                        case 0:
                            applyClass(TH, 'HTgreen');
                            break;
                    }

                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0], //contains ID
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',
                cells: function (row, col) {
                    let cp = {}
                    if (col === porcentajeCol || col === porcentajeCol2 ) { //columna de porcentajes
                        cp.renderer = myPercentage
                    }
                    if (col == GetColFromName("Número Material", colHeader)) {
                        cp.className = 'nuevo-material'
                    }
                    return cp
                },
            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
              //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaPlatinas?tipoPlatina=' + tipoPlatina,
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data')
                                //oculta la tabla y muestra mensaje
                                switch (tipoPlatina) {
                                        case @Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA:
                                                    $("#hot_platinas").hide();
                                                    $("#platinas_text").show();
                                            break;
                                        case @Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.SHEARING:
                                                    $("#hot_shearing").hide();
                                                    $("#shearing_text").show();
                                            break;
                                         case @Bitacoras.Util.SCDM_solicitud_rel_item_material_tipo.PLATINA_SOLDADA:
                                                    $("#hot_platina_soldada").hide();
                                                    $("#platina_soldada_text").show();
                                            break;
                                        default:
                                            console.log(`No se encontró opción para platina tipo: ${tipoPlatina}.`);
                                    }
                            } else { //existe información de rollos
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });

            //congela la primera columna
            hot.getPlugin('manualColumnFreeze').freezeColumn(1);
            hot.render()

        }


        function inicializaHTCreacionReferencia() {
            const container = document.querySelector('#hot_creacion_referencia');

            let colHeader = ['ID', 'Cambios', 'Nuevo Material', 'Material Existente', 'Tipo de Material', 'Planta', 'Motivo de la creacion', 'Tipo Metal', 'Selling Type (Budget)',
                'Núm. antigüo material', 'Peso Bruto (KG)', 'Peso Neto (KG)', 'Unidad Base Medida', 'Descripción ES (Original)', 'Descripción EN (Original)', 'Descripción (ES)', 'Descripción (EN)', 'Commodity', 'Grado/Calidad',
                'Espesor (mm)', 'Tolerancia espesor negativa (mm)', 'Tolerancia espesor positiva (mm)',
                'Ancho (mm)', 'Tolerancia ancho negativa (mm)', 'Tolerancia ancho positiva (mm)',
                'Avance (mm)', 'Tolerancia avance negativa (mm)', 'Tolerancia avance positiva (mm)',
                'Planicidad (mm)', 'Superficie', 'Tratamiento Superficial', 'Peso del recubrimiento', 'Nombre Molino', 'Forma', 'Núm. cliente', 'Núm. parte del cliente',
                'MSA (Honda)', 'Diametro Exterior', 'Diametro Interior',
                'Otro Dato', 'Comentario Adicional', 'Valido'];

            hot = new Handsontable(container, {
                autoWrapRow: true,
                nestedHeaders: [
                    ['', { label: 'Material Existente', colspan: 8 }, { label: 'Datos Base', colspan: 8 }, { label: 'Clasificación', colspan: 22 }, { label: 'Otros Datos', colspan: 2 }]
                    , colHeader
                ],
                afterGetColHeader: function (col, TH) {
                    var TR = TH.parentNode;
                    var THEAD = TR.parentNode;
                    var headerLevel = (-1) * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    if (col == -1) {
                        applyClass(TH, 'HTgray');
                    } else if (headerLevel === -2) {
                        applyClass(TH, 'HTblue');
                    } else {
                        switch (col) {
                            case GetColFromName("Tipo de Material", colHeader):
                            case GetColFromName("Planta", colHeader):
                            case GetColFromName("Motivo de la creacion", colHeader):
                            case GetColFromName("Selling Type (Budget)", colHeader):
                            case GetColFromName("Tipo Metal", colHeader):
                                applyClass(TH, 'HTPurple');
                                break;
                            case GetColFromName("Nuevo Material", colHeader):
                            case GetColFromName("Otro Dato", colHeader):
                            case GetColFromName("Comentario Adicional", colHeader):
                            case GetColFromName("Descripción ES (Original)", colHeader):
                            case GetColFromName("Descripción EN (Original)", colHeader):
                            case GetColFromName("Descripción (ES)", colHeader):
                            case GetColFromName("Descripción (EN)", colHeader):
                            case GetColFromName("Cambios", colHeader):
                                applyClass(TH, 'HTgreen');
                                break;
                            case GetColFromName("Material Existente", colHeader):
                                applyClass(TH, 'HTred');
                                break;
                            case GetColFromName("Núm. antigüo material", colHeader):
                            case GetColFromName("Peso Bruto (KG)", colHeader):
                            case GetColFromName("Peso Neto (KG)", colHeader):
                            case GetColFromName("Unidad Base Medida", colHeader):
                            case GetColFromName("Commodity", colHeader):
                            case GetColFromName("Grado/Calidad", colHeader):
                            case GetColFromName("Espesor (mm)", colHeader):
                            case GetColFromName("Tolerancia espesor negativa (mm)", colHeader):
                            case GetColFromName("Tolerancia espesor positiva (mm)", colHeader):
                            case GetColFromName("Ancho (mm)", colHeader):
                            case GetColFromName("Tolerancia ancho negativa (mm)", colHeader):
                            case GetColFromName("Tolerancia ancho positiva (mm)", colHeader):
                            case GetColFromName("Avance (mm)", colHeader):
                            case GetColFromName("Tolerancia avance negativa (mm)", colHeader):
                            case GetColFromName("Tolerancia avance positiva (mm)", colHeader):
                            case GetColFromName("Planicidad (mm)", colHeader):
                            case GetColFromName("Superficie", colHeader):
                            case GetColFromName("Tratamiento Superficial", colHeader):
                            case GetColFromName("Peso del recubrimiento", colHeader):
                            case GetColFromName("Nombre Molino", colHeader):
                            case GetColFromName("Forma", colHeader):
                            case GetColFromName("Núm. cliente", colHeader):
                            case GetColFromName("Núm. parte del cliente", colHeader):
                            case GetColFromName("MSA (Honda)", colHeader):
                            case GetColFromName("Diametro Exterior", colHeader):
                            case GetColFromName("Diametro Interior", colHeader):
                                applyClass(TH, 'HTOrange');
                                break;
                        }
                    }
                }, columns: [
                    { readOnly: true }, //hidden
                    { renderer: "html" }, //boton para cambios
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden


                ],
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0
                        , GetColFromName("Descripción EN (Original)", colHeader)
                        , GetColFromName("Descripción ES (Original)", colHeader)
                        , GetColFromName("Valido", colHeader)], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Nuevo Material", colHeader)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //hot.setCellMeta(0, 5, 'className', 'fondo-pendiente');




            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaCreacionReferencia',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data')
                                //oculta la tabla y muestra mensaje
                                $("#hot_creacion_referencia").hide();
                                $("#creacion_referencia_text").show();
                            } else { //existe información de rollos
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }

        function inicializaFacturacion() {
            const container = document.querySelector('#hot_facturacion');

            let colHeader = ['ID', 'Número Material', 'Planta', 'Unidad de Medida', 'Clave Producto Servicio', 'Cliente', 'Descripcion', 'Uso CFDI 1 G01 - Adquisición Mercancia'
                , 'Uso CFDI 2 G02 - Devolucion/Descuento', 'Uso de CFDI 3 G02 - Gastos en General', 'Uso de CFDI 4 I02 - Mobiliario y Equipo', 'Uso de CFDI 5 I03 - Equipo de transporte'
                , 'Uso de CFDI 6 I04 - Equipo de computo', 'Uso de CFDI 7 I05 - Herramental general', 'Uso de CFDI 8 I06 - Comunicaciones', 'Uso de CFDI 9 P01 - Por definir',
                'Uso de CFDI 10 S01 - Sin Efectos Fiscales'];

             hot = new Handsontable(container, {
                 autoWrapRow: true,
                 colHeaders: colHeader,
                 afterGetColHeader: function (col, TH) {

                     function applyClass(elem, className) {
                         if (!Handsontable.dom.hasClass(elem, className)) {
                             Handsontable.dom.addClass(elem, className);
                         }
                     }

                     switch (col) {
                         case -1:
                             applyClass(TH, 'HTgray');
                             break;
                         case 2:
                         case 3:
                         case 4:
                         case 5:
                         case 6:
                             applyClass(TH, 'HTgreen');
                             break;
                         case 1:
                             applyClass(TH, 'HTred');
                             break;
                         default:
                             applyClass(TH, 'HTPurple');
                             break;

                     }

                 },
                 columns: [
                     { readOnly: true } //hidden
                     , { readOnly: true } //material
                     , { readOnly: true } //planta
                     , { readOnly: true } //Unidad de medida
                     , { readOnly: true } //clave producto
                     , { readOnly: true }  // cliente
                     , { readOnly: true }  //descripción
                     , { type: 'checkbox', renderer: toCenterRenderer,  } //CFDI 01
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 02
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 03
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 04
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 05
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 06
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 07
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 08
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 09
                     , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 10

                 ],
                 hiddenColumns: {
                     // specify columns hidden by default
                     columns: [0], //contains ID
                 },
                 cells: function (row, col) {
                     let cellProperties = {};
                     if (col == GetColFromName("Número Material", colHeader)) {
                         cellProperties.className = 'nuevo-material'
                     }
                     return cellProperties;
                 },
                 licenseKey: 'non-commercial-and-evaluation',
                 rowHeaders: true,
                 autoColumnSize: true,
                 //width: '100%',
                 height: 'auto',
                 readOnly: true,
                 manualColumnResize: true

             });



             //carga datos iniciales
             //llamada ajax para obtener el detalle del item  seleccionado
                 $.ajax({
                     type: 'POST',
                     url: '/SCDM_solicitud/CargaFacturacion',
                     data: { id_solicitud: @Model.id},
                     success: function (data) {
                         try {
                             if (data.length == 0) { //no existe informacion de rollos
                                 console.log('No data')
                                 //oculta la tabla y muestra mensaje
                                 $("#hot_facturacion").hide();
                                 $("#facturacion_text").show();
                             } else { //existe información de rollos
                                 hot.loadData(data);
                             }
                         }
                         catch (error) {
                             Swal.fire({
                                 icon: 'error',
                                 title: 'Error',
                                 text: 'Ocurrió un error obteniendo la información: ' + error,
                                 confirmButtonText: 'Aceptar',
                             })
                         }
                     },
                     error: function (errorMsg) {
                         //Execute this function when the request fails
                         Swal.fire({
                             icon: 'error',
                             text: 'Ocurrió un error al obtener la información.',
                         })
                     },
                     async: false
                 });


        }
        //funcion para centrar los checkbox
        function toCenterRenderer(instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.CheckboxRenderer.apply(this, arguments);
            td.style.padding = '0px 120px';
        }

        function inicializaCambioIngenieria() {
            const container = document.querySelector('#hot_cambio_ingenieria');

            let colHeader = ['ID', 'Cambios','Material Existente', 'Tipo de Material', 'Planta','Tipo Metal', 'Selling Type (Budget)',
                'Núm. antigüo material', 'Peso Bruto (KG)', 'Peso Neto (KG)', 'Unidad Base Medida', 'Descripción EN (Original)','Descripción ES (Original)', 'Descripción (ES)', 'Descripción (EN)', 'Commodity', 'Grado/Calidad',
                'Espesor (mm)', 'Tolerancia espesor negativa (mm)', 'Tolerancia espesor positiva (mm)',
                'Ancho (mm)', 'Tolerancia ancho negativa (mm)', 'Tolerancia ancho positiva (mm)',
                'Avance (mm)', 'Tolerancia avance negativa (mm)', 'Tolerancia avance positiva (mm)',
                'Planicidad (mm)', 'Superficie', 'Tratamiento Superficial', 'Peso del recubrimiento', 'Nombre Molino', 'Forma', 'Núm. cliente', 'Núm. parte del cliente',
                'MSA (Honda)', 'Diametro Exterior', 'Diametro Interior',
                'Otro Dato', 'Comentario Adicional', 'Valido'];

            hot = new Handsontable(container, {
                autoWrapRow: true,
                nestedHeaders: [
                    ['', { label: 'Cambios', colspan: 1 },{ label: 'Material Existente', colspan: 5 }, { label: 'Datos Base', colspan: 8 }, { label: 'Clasificación', colspan: 22 }, { label: 'Otros Datos', colspan: 2 }, { label: 'Cambios', colspan: 1 }],
                    colHeader
                ],
                afterGetColHeader: function (col, TH) {
                    var TR = TH.parentNode;
                    var THEAD = TR.parentNode;
                    var headerLevel = (-1) * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    if (col == -1) {
                        applyClass(TH, 'HTgray');
                    } else if (headerLevel === -2) {
                        applyClass(TH, 'HTblue');
                    } else {
                        switch (col) {
                            case GetColFromName("Tipo de Material", colHeader):
                            case GetColFromName("Planta", colHeader):
                            case GetColFromName("Selling Type (Budget)", colHeader):
                            case GetColFromName("Tipo Metal", colHeader):
                                applyClass(TH, 'HTPurple');
                                break;
                            case GetColFromName("Otro Dato", colHeader):
                            case GetColFromName("Comentario Adicional", colHeader):
                            case GetColFromName("Descripción EN (Original)", colHeader):
                            case GetColFromName("Descripción ES (Original)", colHeader):
                            case GetColFromName("Descripción (ES)", colHeader):
                            case GetColFromName("Descripción (EN)", colHeader):
                                applyClass(TH, 'HTgreen');
                                break;
                            case GetColFromName("Material Existente", colHeader):
                                applyClass(TH, 'HTred');
                                break;
                            case GetColFromName("Núm. antigüo material", colHeader):
                            case GetColFromName("Peso Bruto (KG)", colHeader):
                            case GetColFromName("Peso Neto (KG)", colHeader):
                            case GetColFromName("Unidad Base Medida", colHeader):
                            case GetColFromName("Commodity", colHeader):
                            case GetColFromName("Grado/Calidad", colHeader):
                            case GetColFromName("Espesor (mm)", colHeader):
                            case GetColFromName("Tolerancia espesor negativa (mm)", colHeader):
                            case GetColFromName("Tolerancia espesor positiva (mm)", colHeader):
                            case GetColFromName("Ancho (mm)", colHeader):
                            case GetColFromName("Tolerancia ancho negativa (mm)", colHeader):
                            case GetColFromName("Tolerancia ancho positiva (mm)", colHeader):
                            case GetColFromName("Avance (mm)", colHeader):
                            case GetColFromName("Tolerancia avance negativa (mm)", colHeader):
                            case GetColFromName("Tolerancia avance positiva (mm)", colHeader):
                            case GetColFromName("Planicidad (mm)", colHeader):
                            case GetColFromName("Superficie", colHeader):
                            case GetColFromName("Tratamiento Superficial", colHeader):
                            case GetColFromName("Peso del recubrimiento", colHeader):
                            case GetColFromName("Nombre Molino", colHeader):
                            case GetColFromName("Forma", colHeader):
                            case GetColFromName("Núm. cliente", colHeader):
                            case GetColFromName("Núm. parte del cliente", colHeader):
                            case GetColFromName("MSA (Honda)", colHeader):
                            case GetColFromName("Diametro Exterior", colHeader):
                            case GetColFromName("Diametro Interior", colHeader):
                            case GetColFromName("Cambios", colHeader):
                                applyClass(TH, 'HTOrange');
                                break;
                        }
                    }
                },
                columns: [
                    { readOnly: true }, //hidden
                    { renderer: "html" }, //boton para cambios
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                   { readOnly: true }, //hidden
                    { readOnly: true } //hidden


                ],
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0
                        , GetColFromName("Descripción ES (Original)", colHeader)
                        , GetColFromName("Descripción EN (Original)", colHeader)
                        , GetColFromName("Valido", colHeader)], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Material Existente", colHeader)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaCambiosIngenieria',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data en cambio ingeniería')
                                //oculta la tabla y muestra mensaje
                                $("#hot_cambio_ingenieria").hide();
                                $("#hot_cambio_ingenieria_text").show();
                            } else { //existe información de rollos
                                console.log(data);
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }

        function inicializaBudget() {
            const container = document.querySelector('#hot_budget');

            let colHeader = ['ID', 'Material Existente', 'Tipo Material', 'Planta', 'Peso bruto REAL bascula (kg)', 'Peso neto REAL bascula (kg)', 'Ángulo A', 'Ángulo B', 'Scrap permitido Puntas y Colas'
                , 'Piezas Dobles', 'Reaplicación', 'Conciliación puntas y colas', 'Conciliación Scrap Ingenieria'
                , 'Tipo de Metal', 'Tipo de Material', 'Tipo de Venta', 'Modelo de Negocio', 'Posición de Rollo'
                , 'IHS num 1', 'IHS num 2', 'IHS num 3', 'IHS num 4', 'IHS num 5'
                , 'Piezas por auto', 'Piezas por golpe', 'Piezas por paquete', 'Peso Inicial', 'Peso Máximo', 'Peso Maximo Tolerancia Positiva', 'Peso Maximo Tolerancia Negativa'
                , 'Peso Minimo', 'Peso Mínimo Tolerancia Positiva', 'Peso Mínimo Tolerancia Negativa'

                , 'Valido'];

            hot = new Handsontable(container, {
                autoWrapRow: true,
                nestedHeaders: [
                    ['', { label: 'Material Existente', colspan: 3 }, { label: 'Nuevos Datos de Budget', colspan: 25 }],
                    colHeader
                ],
                afterGetColHeader: function (col, TH) {
                    var TR = TH.parentNode;
                    var THEAD = TR.parentNode;
                    var headerLevel = (-1) * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    if (col == -1) {
                        applyClass(TH, 'HTgray');
                    } else if (headerLevel === -2) {
                        applyClass(TH, 'HTblue');
                    } else {
                        switch (col) {
                            //case GetColFromName("Peso bruto REAL bascula (kg)"):
                            //    applyClass(TH, 'HTPurple');
                            //    break;
                            case GetColFromName("Tipo Material", colHeader):
                            case GetColFromName("Planta", colHeader):
                                applyClass(TH, 'HTgreen', colHeader);
                                break;
                            case GetColFromName("Material Existente", colHeader):
                                applyClass(TH, 'HTred');
                                break;
                            case GetColFromName("Peso bruto REAL bascula (kg)", colHeader):
                            case GetColFromName("Peso neto REAL bascula (kg)", colHeader):
                            case GetColFromName("Ángulo A", colHeader):
                            case GetColFromName("Ángulo B", colHeader):
                            case GetColFromName("Scrap permitido Puntas y Colas", colHeader):
                            case GetColFromName("Piezas Dobles", colHeader):
                            case GetColFromName("Reaplicación", colHeader):
                            case GetColFromName("Conciliación puntas y colas", colHeader):
                            case GetColFromName("Conciliación Scrap Ingenieria", colHeader):
                            case GetColFromName("Tipo de Metal", colHeader):
                            case GetColFromName("Tipo de Material", colHeader):
                            case GetColFromName("Tipo de Venta", colHeader):
                            case GetColFromName("Modelo de Negocio", colHeader):
                            case GetColFromName("Posición de Rollo", colHeader):
                            case GetColFromName("IHS num 1", colHeader):
                            case GetColFromName("IHS num 2", colHeader):
                            case GetColFromName("IHS num 3", colHeader):
                            case GetColFromName("IHS num 4", colHeader):
                            case GetColFromName("IHS num 5", colHeader):
                            case GetColFromName("Piezas por auto", colHeader):
                            case GetColFromName("Piezas por golpe", colHeader):
                            case GetColFromName("Piezas por paquete", colHeader):
                            case GetColFromName("Peso Inicial", colHeader):
                            case GetColFromName("Peso Máximo", colHeader):
                            case GetColFromName("Peso Maximo Tolerancia Positiva", colHeader):
                            case GetColFromName("Peso Maximo Tolerancia Negativa", colHeader):
                            case GetColFromName("Peso Minimo", colHeader):
                            case GetColFromName("Peso Mínimo Tolerancia Positiva", colHeader):
                            case GetColFromName("Peso Mínimo Tolerancia Negativa", colHeader):
                                applyClass(TH, 'HTOrange');
                                break;
                        }
                    }
                },
                columns: [
                    { readOnly: true }, //hidden
                    { renderer: "html" }, //boton para cambios
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden
                    { readOnly: true }, //hidden


                ],
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0, GetColFromName("Valido", colHeader)], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Material Existente", colHeader)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },

                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaCambiosBudget',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data en cambio BUDGET')
                                //oculta la tabla y muestra mensaje
                                $("#hot_budget").hide();
                                $("#budget_text").show();
                            } else { //existe información de rollos
                                console.log(data);
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }


        function muestraCambios(id_cambio, cambios) {
            //Show success message
            Swal.fire({
                title: "Cambio solicitado",
                html: "Se detectaron los siguientes cambios:<br><br>"+cambios,

            });
        }

        function inicializaCambioEstatus() {
            const container = document.querySelector('#hot_cambio_estatus');

            var headers = ['ID', 'Material', 'Planta', 'Sales Org', 'Estatus - Planta', 'Estatus - Dchain', 'Fecha', 'Ejecución', 'Mensaje SAP'];

            hot = new Handsontable(container, {
                autoWrapRow: true,
                colHeaders: headers,
                afterGetColHeader: function (col, TH) {
                    var TR = TH.parentNode;
                    var THEAD = TR.parentNode;
                    var headerLevel = (-1) * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    if (col == -1) {
                        applyClass(TH, 'HTgray');
                    } else if (headerLevel === -2) {
                        applyClass(TH, 'HTblue');
                    } else {
                        switch (col) {
                            case GetColFromName("Material", headers):
                            case GetColFromName("Planta", headers):
                            case GetColFromName("Sales Org", headers):
                            case GetColFromName("Estatus - Planta", headers):
                            case GetColFromName("Estatus - Dchain", headers):
                            case GetColFromName("Fecha", headers):
                                applyClass(TH, 'HTblue');
                                break;
                            case GetColFromName("Ejecución", headers):
                            case GetColFromName("Mensaje SAP", headers):
                                applyClass(TH, 'HTgreen');
                                break;
                        }
                    }
                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Material", headers)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaCambiosEstatus',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            console.log ('datos; '+data)
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data en cambio estatus')
                                //oculta la tabla y muestra mensaje
                                $("#hot_cambio_estatus").hide();
                                $("#hot_cambio_estatus_text").show();
                            } else { //existe información de rollos
                                console.log(data);
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }

        function inicializaExtension() {
            const container = document.querySelector('#hot_extension');

            var headers = ['ID', 'Material', 'Planta Referencia', 'Planta Destino', 'Valido'];

            hot = new Handsontable(container, {
                autoWrapRow: true,
                colHeaders: headers,
                afterGetColHeader: function (col, TH) {
                    var TR = TH.parentNode;
                    var THEAD = TR.parentNode;
                    var headerLevel = (-1) * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    if (col == -1) {
                        applyClass(TH, 'HTgray');
                    } else if (headerLevel === -2) {
                        applyClass(TH, 'HTblue');
                    } else {
                        switch (col) {
                            case GetColFromName("Material", headers):
                                applyClass(TH, 'HTred');
                                break;
                            case GetColFromName("Planta Referencia", headers):
                            case GetColFromName("Planta Destino", headers):
                                applyClass(TH, 'HTgreen');
                                break;
                        }
                    }
                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0, GetColFromName("Valido", headers)], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Material", headers)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaMaterialesExtension',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            console.log ('datos; '+data)
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data en cambio estatus')
                                //oculta la tabla y muestra mensaje
                                $("#hot_extension").hide();
                                $("#extension_text").show();
                            } else { //existe información de rollos
                                console.log(data);
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }


        function inicializaHTCopperAndBrass() {
            const container = document.querySelector('#hot_copper_and_brass');
            var colHeader = ['ID', 'Número de Material', 'Tipo de Venta', 'Nombre de Molino', 'Número de Cliente', 'Material de <br>Compra a TKMM', 'Clase de Material',
                'Tipo de metal', 'Unidad Base <br>de Medida', 'Número de parte <br>del cliente', 'Descripción del número de parte', 'Descripción del material (ES)', 'Descripción del material (EN)',
                'Grado/Calidad', 'Aprovisionamiento', 'Espesor(mm)', 'Tolerancia Espesor <br>Negativa(mm)', 'Tolerancia Espesor <br>Positiva(mm)', 'Ancho(mm)', 'Tolerancia Ancho <br>Negativa(mm)',
                'Tolerancia Ancho <br>Positiva(mm)', 'Largo(mm)', 'Tolerancia Largo <br>Negativa(mm)', 'Tolerancia Largo <br>Positiva(mm)', 'Peso Bruto(LB)', 'Peso Neto (LB) <br>(Si no lo conoces poner peso bruto)',
                'Aleación', 'Modelo de Negocio', 'Transito', 'Proveedor', 'Precio', 'Moneda', 'Incoterm', 'Terminos de pago', '¿Aplica tasa de IVA?'
            ];

            hot = new Handsontable(container, {
                autoWrapRow: true,
                colHeaders: colHeader,
                afterGetColHeader: function (col, TH) {

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    switch (col) {
                        case -1:
                            applyClass(TH, 'HTgray');
                            break;
                        case GetColFromName("Número de Material", colHeader):
                        case GetColFromName("Descripción del material (ES)", colHeader):
                        case GetColFromName("Descripción del material (EN)", colHeader):
                            applyClass(TH, 'HTgreen');
                            break;
                        case GetColFromName("Número de parte <br>del cliente", colHeader):
                        case GetColFromName("Grado/Calidad", colHeader):
                        case GetColFromName("Espesor(mm)", colHeader):
                        case GetColFromName("Tolerancia Espesor <br>Negativa(mm)", colHeader):
                        case GetColFromName("Tolerancia Espesor <br>Positiva(mm)", colHeader):
                        case GetColFromName("Ancho(mm)", colHeader):
                        case GetColFromName("Tolerancia Ancho <br>Negativa(mm)", colHeader):
                        case GetColFromName("Tolerancia Ancho <br>Positiva(mm)", colHeader):
                        case GetColFromName("Largo(mm)", colHeader):
                        case GetColFromName("Tolerancia Largo <br>Negativa(mm)", colHeader):
                        case GetColFromName("Tolerancia Largo <br>Positiva(mm)", colHeader):
                        case GetColFromName("Peso Bruto(LB)", colHeader):
                        case GetColFromName("Peso Neto (LB) <br>(Si no lo conoces poner peso bruto)", colHeader):
                        case GetColFromName("Precio", colHeader):
                            applyClass(TH, 'HTred');
                            break;
                        case GetColFromName("Tipo de Venta", colHeader):
                        case GetColFromName("Nombre de Molino", colHeader):
                        case GetColFromName("Número de Cliente", colHeader):
                        case GetColFromName("Material de <br>Compra a TKMM", colHeader):
                        case GetColFromName("Clase de Material", colHeader):
                        case GetColFromName("Tipo de metal", colHeader):
                        case GetColFromName("Unidad Base <br>de Medida", colHeader):
                        case GetColFromName("Aprovisionamiento", colHeader):
                        case GetColFromName("Aleación", colHeader):
                        case GetColFromName("Modelo de Negocio", colHeader):
                        case GetColFromName("Transito", colHeader):
                        case GetColFromName("Proveedor", colHeader):
                        case GetColFromName("Moneda", colHeader):
                        case GetColFromName("Incoterm", colHeader):
                        case GetColFromName("Terminos de pago", colHeader):
                        case GetColFromName("¿Aplica tasa de IVA?", colHeader):
                            applyClass(TH, 'HTPurple');
                            break;
                        case GetColFromName("Descripción del número de parte", colHeader):
                            applyClass(TH, 'HTOrange');
                            break;
                    }

                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0, GetColFromName("Grado/Calidad", colHeader), GetColFromName("Precio", colHeader)], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Número de Material", colHeader)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaCB',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data')
                                //oculta la tabla y muestra mensaje
                                $("#hot_copper_and_brass").hide();
                                $("#copper_and_brass_text").show();
                            } else { //existe información de rollos
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }
        function inicializaHTListaTecnica() {
            const container = document.querySelector('#hot_lista_tecnica');

            let colHeader = ['ID', 'Resultado', 'Tipo Material<br>(resultado)', 'Tipo de Venta', 'Peso Bruto<br>(platina)', 'Peso Neto<br>(platina)', 'Unidad de <br>medida', 'Sobrante - mm<br>(cintas)'
                , 'Componente', 'Tipo Material<br>(componente)', 'Cantidad platinas<br>(platinas soldadas)', 'Cantidad cintas <br>resultantes (cintas)', 'Fecha validez<br>(reaplicaciones)'];

            hot = new Handsontable(container, {
                autoWrapRow: true,
                colHeaders: colHeader,
                afterGetColHeader: function (col, TH) {

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    switch (col) {
                        case -1:
                            applyClass(TH, 'HTgray');
                            break;
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 9:
                            applyClass(TH, 'HTgreen');
                            break;
                        case 1:
                        case 7:
                        case 8:
                        case 10:
                        case 11:
                            applyClass(TH, 'HTred');
                            break;
                        case GetColFromName("Fecha validez<br>(reaplicaciones)", colHeader):
                            applyClass(TH, 'HTOrange');
                            break;
                    }

                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Resultado", colHeader) || col == GetColFromName("Componente", colHeader)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaListaTecnica',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data')
                                //oculta la tabla y muestra mensaje
                                $("#hot_lista_tecnica").hide();
                                $("#lista_tecnica_text").show();
                            } else { //existe información de rollos
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }

        function inicializaHTFormatoCompra() {
            const container = document.querySelector('#hot_formato_compra');

            var headers = ['ID', 'Tipo de OC', 'Núm. de PO<br>(Si es nueva línea)', '¿Procesador <br>externo?', 'Proveedor <br>(Procesador Externo)', 'Centro de<br> Recibo', 'Días para la <br>entrega', 'Cantidad <br>Estándar', 'Cantidad <br>Mínima',
                'Cantidad <br>Máxima', 'Número Proveedor', 'Nombre Fiscal (Proveedor)', '¿Aplica IVA?', 'Vigencia de Precio', 'Incoterm', 'Frontera/Puerto/Planta', 'Condiciones de Pago', 'Transporte 1', 'Transporte 2',
                'Número de <br>material', 'Núm. parte cliente', 'Dimensiones<br>tolerancias', 'Precio', 'Moneda', 'Unidad de <br>Medida', 'Cantidad estimada de compra de material<br>por periodo de vigencia',
                'Descripción <br>(N/A para C&B)', 'Peso Mínimo <br>(N/A para C&B)', 'Peso Máx. bobinas de Acero KG<br>(N/A para C&B)', 'Tipo Compra', 'Contacto<br>(N/A para C&B)', 'Teléfono<br>(N/A para C&B)',
                'Email<br>(N/A para C&B)', 'Requerimientos específicos', 'Molino <br>(N/A para procesadores Ext)', 'País origen material <br>(N/A para procesadores Ext)', 'Centro de <br>entrega', 'Almacen de <br>entrega'];
            hot = new Handsontable(container, {
                autoWrapRow: true,
                nestedHeaders: [
                    ['', { label: '¿PO existente?', colspan: 2 }, { label: 'Procesadores Externos', colspan: 7 }, { label: 'Proveedores (Material tkMM)', colspan: 24 }, { label: 'Información del Material', colspan: 2 }, { label: 'Información de entrega', colspan: 2 }],
                    headers
                ],
                afterGetColHeader: function (col, TH) {
                    var TR = TH.parentNode;
                    var THEAD = TR.parentNode;
                    var headerLevel = (-1) * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    if (col == -1) {
                        applyClass(TH, 'HTgray');
                    } else if (headerLevel === -2) {
                        applyClass(TH, 'HTblue');
                    } else {
                        switch (col) {
                            case 1:
                            case 5:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 23:
                            case 34:
                                applyClass(TH, 'HTPurple');
                                break;
                            case 3:
                            case 4:
                            case 10:
                            case 11:
                            case 12:
                            case 19:
                            case 20:
                            case 21:
                            case 24:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                                applyClass(TH, 'HTgreen');
                                break;
                            case 2:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 13:
                            case 22:
                            case 30:
                            case 31:
                            case 32:
                            case 33:
                            case 35:
                            case GetColFromName("Centro de <br>entrega", headers):
                            case GetColFromName("Almacen de <br>entrega", headers):

                                applyClass(TH, 'HTred');
                                break;
                            case 25:
                                applyClass(TH, 'HTOrange');
                                break;
                        }
                    }
                },
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0], //contains ID
                },
                cells: function (row, col) {
                    let cellProperties = {};
                    if (col == GetColFromName("Número de <br>material", headers)) {
                        cellProperties.className = 'nuevo-material'
                    }
                    return cellProperties;
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                height: 'auto',
                readOnly: true,
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',

            });

            //carga datos iniciales
            //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaOrdenesCompra',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            if (data.length == 0) { //no existe informacion de rollos
                                console.log('No data')
                                //oculta la tabla y muestra mensaje
                                $("#hot_formato_compra").hide();
                                $("#formato_compra_text").show();
                            } else { //existe información de rollos
                                hot.loadData(data);
                            }
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }

        //render para porcentaje
        function myPercentage(instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            //console.log(value)
            if (!isNaN(value) && value != null && value != '') {
                td.innerHTML = `${value} %`
            }
        }

        //muestra el modal de secciones
        function mostrarModalSecciones() {
            $('#modalSecciones').modal('show')

        }

        function GetColFromName(name, headers) {
            var n_cols = headers.length;
            var i = 1;

            for (i = 1; i <= n_cols; i++) {
                if (name.toLowerCase() == headers[i].toLowerCase()) {
                    return i;
                }
            }
            return -1; //return -1 if nothing can be found
        }

    </script>

}
