@model Portal_2_0.Models.SCDM_solicitud

@{
    ViewBag.Title = "Formato de Facturación";
    ViewBag.PrimerNivel = "scdm_mm";
    ViewBag.SegundoNivel = "mis_solicitudes_mm";

    ViewBag.ControllerName = ViewContext.RouteData.Values["controller"];
    Clases.Util.MensajesSweetAlert mensajeAlerta = (Clases.Util.MensajesSweetAlert)ViewBag.MensajeAlert;


    ViewBag.nav_style = "nav-sm";
}


@section estilos
{
    <!-- Select2 -->
    <link href="@Url.Content("~/Content/vendors/select2/css/select2.css")" rel="stylesheet">
    <link href="@Url.Content("~/Content/vendors/select2-bootstrap4-theme/select2-bootstrap4.min.css")" rel="stylesheet">
    <!-- iCheck -->
    <link href="@Url.Content("~/Content/vendors/iCheck/skins/flat/green.css")" rel="stylesheet">
    <!--Handsontable -->
    <link href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" rel="stylesheet">
    <link href="~/Content/css/HansontableHeaderColors.css" rel="stylesheet" />
    <style>

        dl {
            border: 3px double #ccc;
            padding: 0.5em;
            background-color: #fffdf0
        }

        dt {
            font-weight: bold;
            color: green;
        }

        dd {
            font-weight: bold;
            color: #454545;
        }

        dt::after {
            content: ":";
        }

        .fondo_verde > td {
            background-color: green;
            color: #fffdf0;
            font-weight: bolder;
        }

        .fondo_amarillo > td {
            background-color: orange;
            color: #221f1f;
            font-weight: bolder;
        }

        .fondo_rojo > td {
            background-color: red;
            color: #fffdf0;
            font-weight: bolder;
        }

        input {
            text-align: right;
        }

        /**
        * Accordion example styles
        */

        /**
         * Accordion example styles
         */

        .wf-accordion-group {
            margin-top: 15px;
        }

            /* All elements succeeding an accordion group use margin-top to create white space */
            .wf-accordion-group + * {
                margin-top: 30px;
            }

        /* All accordions have borders… */
        .wf-accordion {
            border-top: 1px solid #bfbfbf;
            border-bottom: 1px solid #bfbfbf;
            border-left: 1px solid #bfbfbf;
            border-right: 1px solid #bfbfbf;
        }

            /* …unless they directly succeed another accordion, in which case we reset the top-border
          to avoid duplicate white space */
            .wf-accordion + .wf-accordion {
                border-top-width: 0;
            }

        .wf-accordion__header {
            color: #616163;
        }

        /* Please note: The trigger element is a <button> create via JS. To achieve consistent aesthetics,
           the native button styles have to be resetted here */
        .wf-accordion__trigger {
            /* baseline resets */
            background: transparent;
            border-width: 0;
            border-radius: 0;
            box-sizing: border-box;
            color: white;
            font-weight: bold;
            cursor: pointer;
            display: inline-block;
            font-size: inherit;
            letter-spacing: inherit;
            line-height: inherit;
            margin: 0;
            padding: 0;
            text-align: left;
            text-decoration: none;
            /* end of baseline resets */
            /* additional styles for the demo */
            display: block;
            padding: 10px 1.25em 10px 8px;
            position: relative;
            width: 100%;
        }

            .wf-accordion__trigger::after {
                content: '';
                border: solid #fff;
                border-width: 0 2px 2px 0;
                height: 0.5em;
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-60%) rotate(45deg);
                width: 0.5em;
            }

            .wf-accordion__trigger[aria-disabled=true] {
                cursor: not-allowed;
                opacity: 0.5;
            }

            .wf-accordion__trigger[aria-expanded=true]::after {
                transform: translateY(-30%) rotate(-135deg);
            }

            .wf-accordion__trigger:hover,
            .wf-accordion__trigger:focus {
                opacity: 0.8;
                /*  background: #f5f5f5;
                color: #161616;*/
            }

                .wf-accordion__trigger:hover::after,
                .wf-accordion__trigger:focus::after {
                    border-color: #fff;
                }

        .wf-accordion__panel {
            background-color: #fff;
            padding: 10px 8px;
        }

            .wf-accordion__panel[aria-hidden=true] {
                display: none;
            }

        .fondo-pendiente {
            background-color: #009ff5;
        }

        .fondo-completado {
            background-color: #009ff5;
        }


        .alert {
            border-left: 4px solid #009ff5 !important;
            border-top: 1px solid #009ff5 !important;
            border-right: 1px solid #009ff5 !important;
            border-bottom: 1px solid #009ff5 !important;
            background-color: #009ff50d !important;
            margin-bottom: 2px !important;
        }

        .alert-title {
            color: #2457bf;
        }

        .alert-title {
            margin-top: 0;
            margin-bottom: 2px;
            font-size: 18px;
        }

        .alert-content {
            margin: 0;
            font-size: 14px;
            color: #616163 !important;
        }
    </style>

}


@{Html.RenderPartial("_BlockUI", Model);}

@*Para SweetAlert*@
@if (mensajeAlerta != null)
{
    <input type="hidden" value="@mensajeAlerta.Mensaje" id="mensajeAlert" />
    <input type="hidden" value="@mensajeAlerta.getTipoMensaje()" id="mensajeAlertTipo" />
}



<div class="right_col" role="main">
    <div class="">

        <div class="clearfix"></div>

        <div class="row">
            <div class="col-md-12 col-sm-12  ">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>@ViewBag.Title</h2>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        <div class="col-sm-12">
                            <div class="card-box ">
                                <dl class="row">
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.id)</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_tipo_solicitud)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.SCDM_cat_tipo_solicitud.descripcion)</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_solicitante)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.empleados.ConcatNombre)</dd>
                                    @if (Model.SCDM_rel_solicitud_materiales_solicitados.Count > 0 && (Model.id_tipo_solicitud == 1 || Model.id_tipo_solicitud == 2 || Model.id_tipo_solicitud == 5))
                                    {
                                        <dt class="col-sm-2">Tipo de Materiales</dt>
                                        <dd class="col-sm-2">@String.Join(", ", @Model.SCDM_rel_solicitud_materiales_solicitados.Select(x => x.SCDM_cat_tipo_materiales_solicitud.descripcion).Distinct().ToList())</dd>
                                    }
                                    @if (Model.id_tipo_solicitud == 3)
                                    {
                                        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_tipo_cambio)</dt>
                                        <dd class="col-sm-2">@Html.DisplayFor(model => model.SCDM_cat_tipo_cambio.descripcion)</dd>
                                    }
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.id_prioridad)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.SCDM_cat_prioridad.descripcion)</dd>
                                    <dt class="col-sm-2">Plantas</dt>
                                    <dd class="col-sm-2">@String.Join(", ", @Model.SCDM_rel_solicitud_plantas.Select(x => x.plantas.descripcion).Distinct().ToList())</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.descripcion)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.descripcion)</dd>
                                    <dt class="col-sm-2">@Html.DisplayNameFor(model => model.justificacion)</dt>
                                    <dd class="col-sm-2">@Html.DisplayFor(model => model.justificacion)</dd>
                                </dl>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="ln_solid"></div>
                            <div class="form-group row">
                                <h4 style="color:#7c7c7c"><b>Elementos de la Solicitud</b></h4>
                            </div>
                        </div>

                        <div class="col-sm-12">
                            <div class="alert alert-2-secondary">
                                <p class="alert-content">
                                    <i class="fa-solid fa-triangle-exclamation" style="color: #ff9924;"></i> Seleccione los usos de CDFI que apliquen a cada material de la solicitud.
                                    @*<ul>
                                            <li>Se crea un material identico a uno existente pero que proviene de un molino diferente.</li>
                                            <li>Se crea un material identico a uno existente que se va a reportar para un número de cliente diferente.</li>
                                            <li>Se debe especificar Selling Type(Tipo de Venta).</li>
                                        </ul>*@
                                </p>
                            </div>
                        </div>
                        <div class="col-sm-12">

                            <div class="wf-accordion-group js-accordion-group">
                                @if (Model.SCDM_solicitud_rel_item_material.Any(x => x.SCDM_solicitud_rel_facturacion.Any()) || Model.SCDM_solicitud_rel_creacion_referencia.Any(x => x.SCDM_solicitud_rel_facturacion.Any()))
                                {
                                    //Facturacion
                                    <div class="wf-accordion js-accordion" data-wf-accordion-expanded="">
                                        <div class="wf-accordion__header js-accordion__header">
                                            <h3><button class="wf-accordion__trigger js-accordion__trigger fondo-completado" aria-expanded="true" aria-controls="accordion-1__panel-0" id="accordion-1__header-0">Lista Técnica</button></h3>
                                        </div>
                                        <div class="wf-accordion__panel js-accordion__panel " aria-hidden="false" id="accordion-1__panel-0" aria-labelledby="accordion-1__header-0">
                                            <!--Ejemplo Handsontable-->
                                            <div id="example" class="hot handsontable htRowHeaders htColumnHeaders" data-originalstyle="height: 320px; overflow: hidden; width: 100%;"></div>
                                            @*<p>
                                                    <br />
                                                    <button class="btn btn-warning btn-sm float-right" onclick="insertaFila()">
                                                        <i class="fa-regular fa-square-plus"></i>
                                                        Agregar
                                                    </button>
                                                </p>*@
                                            <div class="form-group row">

                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="ln_solid"></div>
                            <a onclick="save()" class="btn btn-success btn-lg" title="Generar macro" style="background-color: #1D6F42; color:white">
                                <i class="fa-regular fa-file-excel"></i> Generar Macro
                            </a>
                        </div>
                        <div class="col-md-10">
                            <div class="ln_solid"></div>
                            <button type="button" id="btn-submit-salir" class="btn btn-info btn-lg float-lg-right"><i class="fa-solid fa-save"></i>  Guardar y salir</button>
                            <button type="button" id="btn-submit" class="btn btn-success btn-lg float-lg-right"><i class="fa-solid fa-save"></i>  Guardar y continuar</button>
                        </div>
                    </div>
                </div>
                <div>
                    <br />
                    <a href="@Url.Action("EditarSolicitud", ViewBag.ControllerName, new {id=Model.id, viewUser = Request.Params["viewUser"] })" class="btn btn-round btn-info btm-sm" title="Volver" style="color:white">
                        <i class="fa fa-arrow-circle-left"></i> Volver al listado
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render(Url.Content("~/Content/vendors/jquery-iu/jquery-ui.min.js"))
    @Scripts.Render(Url.Content("~/Content/vendors/select2/js/select2.full.min.js"))
    <!-- SweetAlert2 (css incluido) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.3/sweetalert2.all.min.js" integrity="sha512-/iBgV43zPirSC0tue+PT/1VHGs7En24twBmT+sVMgn9PTaOpKfbgIyL5YsGKlbAIxcwz9S8W/YEnYjpIYj2Axw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    @Scripts.Render(Url.Content("~/Scripts/AlertasSweetAlert.js"))
    <!-- iCheck -->
    @Scripts.Render(Url.Content("~/Content/vendors/iCheck/icheck.min.js"))
    <script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.min.js"></script>
    <script src="~/Content/vendors/wfaccordion/wf.accordion.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/languages/es-MX.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.3/sweetalert2.all.min.js" integrity="sha512-/iBgV43zPirSC0tue+PT/1VHGs7En24twBmT+sVMgn9PTaOpKfbgIyL5YsGKlbAIxcwz9S8W/YEnYjpIYj2Axw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        //variable para saber si ha cambiado el formulario y asi no se detenga por doble submit
        var documento_soporte_cambios = 1;
        var hot, hot_materiales;

        var headers = ['ID', 'Número Material', 'Planta','Unidad de Medida', 'Clave Producto Servicio', 'Cliente', 'Descripcion', 'Uso CFDI 1 G01<br>Adquisición Mercancia'
            , 'Uso CFDI 2 G02<br>Devolucion/Descuento', 'Uso de CFDI 3 G02<br>Gastos en General', 'Uso de CFDI 4 I02<br>Mobiliario y Equipo', 'Uso de CFDI 5 I03<br>Equipo de transporte'
            , 'Uso de CFDI 6 I04<br>Equipo de computo', 'Uso de CFDI 7 I05<br>Herramental general', 'Uso de CFDI 8 I06<br>Comunicaciones', 'Uso de CFDI 9 P01<br>Por definir',
            'Uso de CFDI 10 S01<br>Sin Efectos Fiscales'
        ];


        var toastMixin = Swal.mixin({
            toast: true,
            icon: 'success',
            iconColor: 'white',
            customClass: {
                popup: 'colored-toast'
            },
            animation: false,
            position: 'top-right',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        });

        //variables para array
        var si_noArray = ['SÍ', 'NO'];


        $(document).ready(function () {

            //inicializa hansontable
            inicializaHandsontable();
            cargaDatosIniciales();

            $("#btn-submit").on("click", function () { EnviaFormulario(false) });
            $("#btn-submit-salir").on("click", function () { EnviaFormulario(true) });

            $.unblockUI();
        });

        function inicializaHandsontable() {
            const container = document.querySelector('#example');

            //obtiene el index de la columna con porcentaje

            hot = new Handsontable(container, {
                autoWrapRow: true,

                colHeaders: headers,
                afterGetColHeader: function (col, TH) {

                    function applyClass(elem, className) {
                        if (!Handsontable.dom.hasClass(elem, className)) {
                            Handsontable.dom.addClass(elem, className);
                        }
                    }

                    switch (col) {
                        case -1:
                            applyClass(TH, 'HTgray');
                            break;
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            applyClass(TH, 'HTgreen');
                            break;
                        case 1:
                            applyClass(TH, 'HTred');
                            break;
                        default:
                            applyClass(TH, 'HTPurple');
                            break;

                    }

                },
                columns: [
                    { readOnly: true } //hidden
                    , { readOnly: true } //material
                    , { readOnly: true } //planta
                    , { readOnly: true } //Unidad de medida
                    , { readOnly: true } //clave producto
                    , { readOnly: true }  // cliente
                    , { readOnly: true }  //descripción
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 01
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 02
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 03
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 04
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 05
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 06
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 07
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 08
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 09
                    , { type: 'checkbox', renderer: toCenterRenderer } //CFDI 10

                ],
                hiddenColumns: {
                    // specify columns hidden by default
                    columns: [0], //contains ID
                },
                licenseKey: 'non-commercial-and-evaluation',
                rowHeaders: true,
                autoColumnSize: true,
                //width: '100%',
                fixedColumnsStart: 2,
                height: '400px',
                manualColumnResize: true,
                licenseKey: 'non-commercial-and-evaluation',
               // contextMenu: ['row_above', 'row_below', '---------', 'remove_row', '---------', 'undo', 'redo', '---------', 'cut', 'copy'],
                language: 'es-MX',

            });

        }

        function save() {
            hot.validateCells((valid) => {
                if (valid) {
                    // ... code for validated cells

                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        contentType: 'application/json; charset=utf-8',
                        url: '/SCDM_solicitud/EnviaFacturacion?id='+@Model.id,
                        data: JSON.stringify(hot.getData()),
                        success: function (data) {

                            try {


                                //asigna los ids guardados y modificados
                                for (i = 0; i < data.length; i++) {
                                    if (data[i] != null && data[i].result == "OK") {
                                        hot.setDataAtCell(data[i].fila, 0, data[i].id);
                                    }
                                }
                                //abre nueva pestaña
                                window.open("../GeneraArchivoFacturacion?id_solicitud="+@Model.id);


                            }
                            catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Ocurrió un error obteniendo la información: ' + error,
                                    confirmButtonText: 'Aceptar',
                                })
                            }
                        },
                        error: function (textStatus, errorThrown) {
                            //en caso de error en la llamada ajax
                            Swal.fire({
                                icon: 'error',
                                title: 'Ocurrió un error',
                                text: 'Intente nuevamente.'
                            })
                        },
                        async: true
                    });
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Mensaje',
                        text: 'Para continuar, verifica que no haya celdas marcadas en color rojo.',
                    })
                   // console.log(hot.getData());
                }
            })
        }

        function toCenterRenderer(instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.CheckboxRenderer.apply(this, arguments);
            td.style.padding = '0px 70px';
        }

        function EnviaFormulario(salir) {
            hot.validateCells((valid) => {
                if (valid) {
                    // ... code for validated cells

                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        contentType: 'application/json; charset=utf-8',
                        url: '/SCDM_solicitud/EnviaFacturacion?id='+@Model.id,
                        data: JSON.stringify(hot.getData()),
                        success: function (data) {

                            try {

                                let result = data.result == null ? data[0].result : data.result;


                                toastMixin.fire({
                                    icon: data.icon == null ? data[0].icon : data.icon,
                                    title: data.message == null ? data[0].message : data.message
                                });

                                if (salir && result == "OK") {
                                    window.location.href = "../EditarSolicitud/@Model.id?viewUser=@Request.Params["viewUser"] ";
                                }

                                //asigna los ids guardados y modificados
                                for (i = 0; i < data.length; i++) {
                                    if (data[i] != null && data[i].result == "OK") {
                                        hot.setDataAtCell(data[i].fila, 0, data[i].id);
                                    }
                                    else {
                                        //console.log(data[i]);
                                    }
                                }


                            }
                            catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Ocurrió un error obteniendo la información: ' + error,
                                    confirmButtonText: 'Aceptar',
                                })
                            }
                        },
                        error: function (textStatus, errorThrown) {
                            //en caso de error en la llamada ajax
                            Swal.fire({
                                icon: 'error',
                                title: 'Ocurrió un error',
                                text: 'Intente nuevamente.'
                            })
                        },
                        async: true
                    });
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Mensaje',
                        text: 'Para continuar, verifica que no haya celdas marcadas en color rojo.',
                    })
                   // console.log(hot.getData());
                }
            })

        }


        function cargaDatosIniciales() {

             //llamada ajax para obtener el detalle del item  seleccionado
                $.ajax({
                    type: 'POST',
                    url: '/SCDM_solicitud/CargaFacturacion',
                    data: { id_solicitud: @Model.id},
                    success: function (data) {
                        try {
                            console.log(data);
                            hot.loadData(data);
                        }
                        catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error obteniendo la información: ' + error,
                                confirmButtonText: 'Aceptar',
                            })
                        }
                    },
                    error: function (errorMsg) {
                        //Execute this function when the request fails
                        Swal.fire({
                            icon: 'error',
                            text: 'Ocurrió un error al obtener la información.',
                        })
                    },
                    async: false
                });
        }



        function GetColFromName(name) {
            var n_cols = headers.length;
            var i = 1;

            for (i = 1; i <= n_cols; i++) {
                if (name.toLowerCase() == headers[i].toLowerCase()) {
                    return i;
                }
            }
            return -1; //return -1 if nothing can be found
        }

        $(window).resize(function () {
            hot.render();
        });


    </script>

}
